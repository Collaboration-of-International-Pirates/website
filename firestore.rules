rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      let userDoc = get(/databases/$(database)/documents/user/$(request.auth.uid));
      return userDoc != null && userDoc.data.role == 'admin';
    }

    function isValidElectionData(data){
      return data.keys().hasAll(['name', 'description', 'startDate', 'endDate', 'candidates']) &&
      data.name is string && data.name.size() > 0 && data.name.size() < 100 &&
      data.description is string && data.description.size() > 0 && data.description.size() < 100 &&
      data.startDate is timestamp &&
      data.endDate is timestamp &&
      data.candidates is list && data.candidates.size() > 0 && data.candidates.size() < 100;
    }
    // Need for stripe
    match /customers/{uid} {
      allow read, write: if request.auth.uid == uid;

      match /checkout_sessions/{id} {
        allow read, write: if request.auth.uid == uid;
      }

      match /subscriptions/{id} {
        allow read: if request.auth.uid == uid;
      }

      match /payments/{id} {
        allow read: if request.auth.uid == uid;
      }
    }

    // Define rules for the 'products' collection
    match /products/{id} {
      allow read: if true;

      match /prices/{id} {
        allow read: if true;
      }

      match /tax_rates/{id} {
        allow read: if true;
      }
    }

    // User document rules
    match /user/{userId} {
      // Function to validate address lines
      function isValidAddressLines(addressLines) {
        return addressLines is list &&
        addressLines.size() == 2 &&
        addressLines[0] is string &&
        addressLines[0].size() <= 50 &&
        addressLines[1] is string &&
        addressLines[1].size() <= 50;
      }

      // Function to validate user data
      function isValidUserData(user) {
        return user is map && user.keys().hasAll(['firstName', 'lastName', 'dob', 'address', 'role']) &&
        user.firstName is string && user.firstName.size() <= 50 &&
        user.lastName is string && user.lastName.size() <= 50 &&
        user.dob is string &&
        user.address is map &&
        isValidAddressLines(user.address.addressLines) &&
        user.address.postcode is string && user.address.postcode.size() <= 50 &&
        user.address.locality is string && user.address.locality.size() <= 50 &&
        user.address.regionCode is string &&
        user.role is list && user.role.size() == 0;
      }
      // Allowing write access if the user data is valid and the UID matches
      allow write: if (isValidUserData(request.resource.data) || isAdmin()) && request.auth.uid == userId;

      // Allowing read access if the UID matches
      allow read: if request.auth.uid == userId;
      allow write: if isAdmin();
    }

    // Election document rules
    match /election {
      allow list: if request.auth != null;
    }
    // Election document rules for a specific electionId
    match /election/{electionId} {
      allow read: if request.auth.uid != null;
      allow write: if isAdmin();
      allow list: if request.auth != null;
    }

    // Candidate document rules within a specific election
    match /election/{electionId}/candidate/{candidateId} {
      allow read: if request.auth.uid != null;
      allow write: if isAdmin();
      allow list: if request.auth != null;
    }



    // Vote document rules within a specific election and user
    match /election/{electionId}/vote/{uid} {
      // Function to validate vote data
      function isValidVoteData(data) {
        return data.keys().hasAll(['rankings']) &&
        data.rankings is map &&
        data.rankings.keys().hasAll(['candidateId']) &&
        request.auth.uid == uid;
      }

    // Helper function to check if a value is a list of strings
      function isStringList(value) {
        // return (value is list) && value.every((item) => item is string);
        return true;
      }

    // Helper function to check if all strings in the list exist in the candidate collection
      function allStringsExistInCandidateCollection(candidateIdList, electionId) {
        // return candidateIdList.every((candidateId) => {
        //   return exists(/databases/$(database)/documents/election/$(electionId)/candidate/$(candidateId));
        // });
        return true;
      }

      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null && (isValidVoteData(request.resource.data) || isAdmin());
      // allow read, write: if isAdmin();
    }
  }
}
