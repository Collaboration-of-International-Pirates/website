[debug] [2024-01-04T22:35:46.446Z] ----------------------------------------------------------------------
[debug] [2024-01-04T22:35:46.448Z] Command:       /usr/local/bin/firebase /home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/bin/firebase emulators:start
[debug] [2024-01-04T22:35:46.448Z] CLI Version:   13.0.2
[debug] [2024-01-04T22:35:46.448Z] Platform:      linux
[debug] [2024-01-04T22:35:46.448Z] Node Version:  v18.5.0
[debug] [2024-01-04T22:35:46.449Z] Time:          Thu Jan 04 2024 22:35:46 GMT+0000 (Greenwich Mean Time)
[debug] [2024-01-04T22:35:46.449Z] ----------------------------------------------------------------------
[debug] 
[debug] [2024-01-04T22:35:46.532Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2024-01-04T22:35:46.533Z] > authorizing via signed-in user (maberwilliam@gmail.com)
[debug] [2024-01-04T22:35:46.567Z] openjdk version "17.0.9" 2023-10-17

[debug] [2024-01-04T22:35:46.568Z] OpenJDK Runtime Environment (build 17.0.9+9-Ubuntu-123.10)
OpenJDK 64-Bit Server VM (build 17.0.9+9-Ubuntu-123.10, mixed mode, sharing)

[debug] [2024-01-04T22:35:46.572Z] Parsed Java major version: 17
[info] i  emulators: Starting emulators: auth, functions, firestore, hosting, storage, eventarc, extensions {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: auth, functions, firestore, hosting, storage, eventarc, extensions"}}
[debug] [2024-01-04T22:35:46.575Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/ptate-df901 [none]
[debug] [2024-01-04T22:35:46.806Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/ptate-df901 200
[debug] [2024-01-04T22:35:46.806Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/ptate-df901 {"projectId":"ptate-df901","projectNumber":"795297920122","displayName":"pirate party","name":"projects/ptate-df901","resources":{"hostingSite":"ptate-df901","storageBucket":"ptate-df901.appspot.com","locationId":"us-central"},"state":"ACTIVE","etag":"1_d0172919-a97c-4a4b-9caa-1f6911ef4383"}
[warn] ⚠  hosting: The hosting emulator is configured but there is no hosting configuration. Have you run firebase init hosting? {"metadata":{"emulator":{"name":"hosting"},"message":"The hosting emulator is configured but there is no hosting configuration. Have you run \u001b[1mfirebase init hosting\u001b[22m?"}}
[debug] [2024-01-04T22:35:46.821Z] [logging] Logging Emulator only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2024-01-04T22:35:46.821Z] [auth] Authentication Emulator only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2024-01-04T22:35:46.821Z] [firestore] Firestore Emulator only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2024-01-04T22:35:46.821Z] [firestore.websocket] websocket server for firestore only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2024-01-04T22:35:46.822Z] [storage] Storage Emulator only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2024-01-04T22:35:46.822Z] assigned listening specs for emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400},{"address":"::1","family":"IPv6","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000},{"address":"::1","family":"IPv6","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"auth":[{"address":"127.0.0.1","family":"IPv4","port":9099}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8081}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9150}],"storage":[{"address":"127.0.0.1","family":"IPv4","port":9199}]},"metadata":{"message":"assigned listening specs for emulators"}}
[debug] [2024-01-04T22:35:46.831Z] [hub] writing locator at /tmp/hub-ptate-df901.json
[debug] [2024-01-04T22:35:46.836Z] [Extensions] Started Extensions emulator, this is a noop.
[debug] [2024-01-04T22:35:46.837Z] [functions] Functions Emulator only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2024-01-04T22:35:46.837Z] [eventarc] Eventarc Emulator only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2024-01-04T22:35:46.837Z] late-assigned ports for functions and eventarc emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400},{"address":"::1","family":"IPv6","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000},{"address":"::1","family":"IPv6","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"auth":[{"address":"127.0.0.1","family":"IPv4","port":9099}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8081}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9150}],"storage":[{"address":"127.0.0.1","family":"IPv4","port":9199}],"functions":[{"address":"127.0.0.1","family":"IPv4","port":5001}],"eventarc":[{"address":"127.0.0.1","family":"IPv4","port":9299}]},"metadata":{"message":"late-assigned ports for functions and eventarc emulators"}}
[warn] ⚠  functions: The following emulators are not running, calls to these services from the Functions emulator will affect production: database, hosting, pubsub {"metadata":{"emulator":{"name":"functions"},"message":"The following emulators are not running, calls to these services from the Functions emulator will affect production: \u001b[1mdatabase, hosting, pubsub\u001b[22m"}}
[debug] [2024-01-04T22:35:46.839Z] defaultcredentials: writing to file /home/lucy/.config/firebase/maberwilliam_gmail_com_application_default_credentials.json
[debug] [2024-01-04T22:35:46.840Z] Setting GAC to /home/lucy/.config/firebase/maberwilliam_gmail_com_application_default_credentials.json {"metadata":{"emulator":{"name":"functions"},"message":"Setting GAC to /home/lucy/.config/firebase/maberwilliam_gmail_com_application_default_credentials.json"}}
[debug] [2024-01-04T22:35:46.841Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/ptate-df901/adminSdkConfig [none]
[debug] [2024-01-04T22:35:47.385Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/ptate-df901/adminSdkConfig 200
[debug] [2024-01-04T22:35:47.385Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/ptate-df901/adminSdkConfig {"projectId":"ptate-df901","storageBucket":"ptate-df901.appspot.com","locationId":"us-central"}
[debug] [2024-01-04T22:35:47.433Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2024-01-04T22:35:47.433Z] Ignoring unsupported arg: single_project_mode_error {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: single_project_mode_error"}}
[debug] [2024-01-04T22:35:47.434Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","/home/lucy/.cache/firebase/emulators/cloud-firestore-emulator-v1.18.2.jar","--host","127.0.0.1","--port",8081,"--websocket_port",9150,"--project_id","ptate-df901","--rules","/home/lucy/Code/Priaite_Party_UK/website/firestore.rules","--single_project_mode",true,"--functions_emulator","127.0.0.1:5001"],"optionalArgs":["port","webchannel_port","host","rules","websocket_port","functions_emulator","seed_from_export","project_id","single_project_mode"],"joinArgs":false} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"/home/lucy/.cache/firebase/emulators/cloud-firestore-emulator-v1.18.2.jar\",\"--host\",\"127.0.0.1\",\"--port\",8081,\"--websocket_port\",9150,\"--project_id\",\"ptate-df901\",\"--rules\",\"/home/lucy/Code/Priaite_Party_UK/website/firestore.rules\",\"--single_project_mode\",true,\"--functions_emulator\",\"127.0.0.1:5001\"],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"websocket_port\",\"functions_emulator\",\"seed_from_export\",\"project_id\",\"single_project_mode\"],\"joinArgs\":false}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to \u001b[1mfirestore-debug.log\u001b[22m"}}
[debug] [2024-01-04T22:35:48.217Z] Jan 04, 2024 10:35:48 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start
INFO: Started WebSocket server on ws://127.0.0.1:9150
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:35:48 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start\nINFO: Started WebSocket server on ws://127.0.0.1:9150\n"}}
[debug] [2024-01-04T22:35:48.230Z] API endpoint: http://127.0.0.1:8081
 {"metadata":{"emulator":{"name":"firestore"},"message":"API endpoint: http://127.0.0.1:8081\n"}}
[debug] [2024-01-04T22:35:48.231Z] If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:

   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8081

Dev App Server is now running.

 {"metadata":{"emulator":{"name":"firestore"},"message":"If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:\n\n   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8081\n\nDev App Server is now running.\n\n"}}
[info] ✔  firestore: Firestore Emulator UI websocket is running on 9150. {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator UI websocket is running on 9150."}}
[debug] [2024-01-04T22:35:54.996Z] Ignoring unsupported arg: port {"metadata":{"emulator":{"name":"storage"},"message":"Ignoring unsupported arg: port"}}
[debug] [2024-01-04T22:35:55.995Z] Temp file directory for storage emulator: /tmp/firebase/storage/blobs {"metadata":{"emulator":{"name":"storage"},"message":"Temp file directory for storage emulator: /tmp/firebase/storage/blobs"}}
[debug] [2024-01-04T22:35:56.009Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"ui"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2024-01-04T22:35:56.009Z] Ignoring unsupported arg: port {"metadata":{"emulator":{"name":"ui"},"message":"Ignoring unsupported arg: port"}}
[debug] [2024-01-04T22:35:56.009Z] Starting Emulator UI with command {"binary":"node","args":["/home/lucy/.cache/firebase/emulators/ui-v1.11.7/server/server.js"],"optionalArgs":[],"joinArgs":false} {"metadata":{"emulator":{"name":"ui"},"message":"Starting Emulator UI with command {\"binary\":\"node\",\"args\":[\"/home/lucy/.cache/firebase/emulators/ui-v1.11.7/server/server.js\"],\"optionalArgs\":[],\"joinArgs\":false}"}}
[info] i  ui: Emulator UI logging to ui-debug.log {"metadata":{"emulator":{"name":"ui"},"message":"Emulator UI logging to \u001b[1mui-debug.log\u001b[22m"}}
[debug] [2024-01-04T22:35:56.175Z] Web / API server started at 127.0.0.1:4000
 {"metadata":{"emulator":{"name":"ui"},"message":"Web / API server started at 127.0.0.1:4000\n"}}
[debug] [2024-01-04T22:35:56.176Z] Web / API server started at ::1:4000
 {"metadata":{"emulator":{"name":"ui"},"message":"Web / API server started at ::1:4000\n"}}
[debug] [2024-01-04T22:35:56.278Z] [Extensions] Connecting Extensions emulator, this is a noop.
[info] i  functions: Watching "/home/lucy/Code/Priaite_Party_UK/website/functions" for Cloud Functions... {"metadata":{"emulator":{"name":"functions"},"message":"Watching \"/home/lucy/Code/Priaite_Party_UK/website/functions\" for Cloud Functions..."}}
[debug] [2024-01-04T22:35:56.289Z] Customer code is not Node
[debug] [2024-01-04T22:35:56.291Z] Customer code is not Python code.
[error] ⬢  functions: Failed to load function definition from source: FirebaseError: Could not detect language for functions at /home/lucy/Code/Priaite_Party_UK/website/functions {"metadata":{"emulator":{"name":"functions"},"message":"Failed to load function definition from source: FirebaseError: Could not detect language for functions at /home/lucy/Code/Priaite_Party_UK/website/functions"}}
[info] i  functions: Watching "/home/lucy/Code/Priaite_Party_UK/website/ppuk" for Cloud Functions... {"metadata":{"emulator":{"name":"functions"},"message":"Watching \"/home/lucy/Code/Priaite_Party_UK/website/ppuk\" for Cloud Functions..."}}
[debug] [2024-01-04T22:35:56.296Z] Validating nodejs source
[warn] ⚠  functions: Couldn't find firebase-functions package in your source code. Have you run 'npm install'? 
[debug] [2024-01-04T22:35:56.300Z] getFunctionsSDKVersion encountered error: Cannot find module 'firebase-functions'
Require stack:
- /home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/deploy/functions/runtimes/node/versioning.js
- /home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/deploy/functions/runtimes/node/index.js
- /home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/deploy/functions/runtimes/index.js
- /home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/gcp/cloudfunctions.js
- /home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/deploy/functions/backend.js
- /home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/emulator/functionsEmulatorShared.js
- /home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/emulator/functionsEmulator.js
- /home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/emulator/controller.js
- /home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/emulator/commandUtils.js
- /home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/commands/database-get.js
- /home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/commands/index.js
- /home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/index.js
- /home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/bin/firebase.js {"code":"MODULE_NOT_FOUND","requireStack":["/home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/deploy/functions/runtimes/node/versioning.js","/home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/deploy/functions/runtimes/node/index.js","/home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/deploy/functions/runtimes/index.js","/home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/gcp/cloudfunctions.js","/home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/deploy/functions/backend.js","/home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/emulator/functionsEmulatorShared.js","/home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/emulator/functionsEmulator.js","/home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/emulator/controller.js","/home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/emulator/commandUtils.js","/home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/commands/database-get.js","/home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/commands/index.js","/home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/index.js","/home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/bin/firebase.js"]}
[debug] [2024-01-04T22:35:56.302Z] checkFunctionsSDKVersion encountered error: Invalid Version:  {}
[debug] [2024-01-04T22:35:56.304Z] > [functions] package.json contents: {
  "name": "functions",
  "description": "Cloud Functions for Firebase",
  "scripts": {
    "serve": "firebase emulators:start --only functions",
    "shell": "firebase functions:shell",
    "start": "npm run shell",
    "deploy": "firebase deploy --only functions",
    "logs": "firebase functions:log"
  },
  "engines": {
    "node": "18"
  },
  "main": "index.js",
  "dependencies": {
    "firebase-admin": "^11.8.0",
    "firebase-functions": "^4.3.1"
  },
  "devDependencies": {
    "firebase-functions-test": "^3.1.0"
  },
  "private": true
}
[debug] [2024-01-04T22:35:56.304Z] Building nodejs source
[debug] [2024-01-04T22:35:56.305Z] Failed to find version of module node: reached end of search path /home/lucy/Code/Priaite_Party_UK/website/ppuk/node_modules
[info] ✔  functions: Using node@18 from host. 
[debug] [2024-01-04T22:35:56.309Z] Could not parse firebase-functions version '' into semver. Falling back to parseTriggers.
[error] ⬢  functions: Failed to load function definition from source: FirebaseError: Error parsing triggers: Cannot find module 'firebase-functions/v2/https'
Require stack:
- /home/lucy/Code/Priaite_Party_UK/website/ppuk/index.js
- /home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/deploy/functions/runtimes/node/triggerParser.js
1) If you want to compile the package/file into executable, please pay attention to compilation warnings and specify a literal in 'require' call. 2) If you don't want to compile the package/file into executable and want to 'require' it from filesystem (likely plugin), specify an absolute path in 'require' call using process.cwd() or process.execPath.

Try running "npm install" in your functions directory before deploying. {"metadata":{"emulator":{"name":"functions"},"message":"Failed to load function definition from source: FirebaseError: Error parsing triggers: Cannot find module 'firebase-functions/v2/https'\nRequire stack:\n- /home/lucy/Code/Priaite_Party_UK/website/ppuk/index.js\n- /home/lucy/.cache/firebase/tools/lib/node_modules/firebase-tools/lib/deploy/functions/runtimes/node/triggerParser.js\n1) If you want to compile the package/file into executable, please pay attention to compilation warnings and specify a literal in 'require' call. 2) If you don't want to compile the package/file into executable and want to 'require' it from filesystem (likely plugin), specify an absolute path in 'require' call using process.cwd() or process.execPath.\n\nTry running \"npm install\" in your functions directory before deploying."}}
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://127.0.0.1:4000/               │
└─────────────────────────────────────────────────────────────┘

┌────────────────┬──────────────────────────────────┬──────────────────────────────────┐
│ Emulator       │ Host:Port                        │ View in Emulator UI              │
├────────────────┼──────────────────────────────────┼──────────────────────────────────┤
│ Authentication │ 127.0.0.1:9099                   │ http://127.0.0.1:4000/auth       │
├────────────────┼──────────────────────────────────┼──────────────────────────────────┤
│ Functions      │ 127.0.0.1:5001                   │ http://127.0.0.1:4000/functions  │
├────────────────┼──────────────────────────────────┼──────────────────────────────────┤
│ Firestore      │ 127.0.0.1:8081                   │ http://127.0.0.1:4000/firestore  │
├────────────────┼──────────────────────────────────┼──────────────────────────────────┤
│ Hosting        │ Failed to initialize (see above) │                                  │
├────────────────┼──────────────────────────────────┼──────────────────────────────────┤
│ Storage        │ 127.0.0.1:9199                   │ http://127.0.0.1:4000/storage    │
├────────────────┼──────────────────────────────────┼──────────────────────────────────┤
│ Eventarc       │ 127.0.0.1:9299                   │ n/a                              │
├────────────────┼──────────────────────────────────┼──────────────────────────────────┤
│ Extensions     │ 127.0.0.1:5001                   │ http://127.0.0.1:4000/extensions │
└────────────────┴──────────────────────────────────┴──────────────────────────────────┘
  Emulator Hub running at 127.0.0.1:4400
  Other reserved ports: 4500, 9150
┌─────────────────────────┬───────────────┬─────────────────────┐
│ Extension Instance Name │ Extension Ref │ View in Emulator UI │
└─────────────────────────┴───────────────┴─────────────────────┘
Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[debug] [2024-01-04T22:36:01.683Z] Jan 04, 2024 10:36:01 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:36:01 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2024-01-04T22:36:01.690Z] Jan 04, 2024 10:36:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:36:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:36:01.697Z] Jan 04, 2024 10:36:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:36:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:36:01.714Z] Jan 04, 2024 10:36:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:36:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:36:01.902Z] Jan 04, 2024 10:36:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:36:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:36:02.240Z] Jan 04, 2024 10:36:02 PM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError
WARNING: Operation failed: Error compiling rules:
L122:22 Unexpected 'null'.
L122:22 mismatched input 'null' expecting IDENTIFIER
L122:27 An unsupported type identifier was used with the 'is' operator. Received null. Expected one of bool,bytes,constraint,duration,float,int,latlng,list,set,number,map,string,timestamp,path,map_diff
L122:48 mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}
L149:40 Unexpected '='.
L149:64 mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}
L153:3 Unexpected '}'.
com.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:
L122:22 Unexpected 'null'.
L122:22 mismatched input 'null' expecting IDENTIFIER
L122:27 An unsupported type identifier was used with the 'is' operator. Received null. Expected one of bool,bytes,constraint,duration,float,int,latlng,list,set,number,map,string,timestamp,path,map_diff
L122:48 mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}
L149:40 Unexpected '='.
L149:64 mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}
L153:3 Unexpected '}'.
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:115)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:74)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.getAuthorizer(EmulatorRulesCompiler.java:67)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.listCollectionIds(CloudFirestoreV1.java:642)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1Router.listCollectionIds(CloudFirestoreV1Router.java:212)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.lambda$listCollectionIds$12(FirestoreV1GrpcAdapter.java:201)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.unary(FirestoreV1GrpcAdapter.java:70)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.listCollectionIds(FirestoreV1GrpcAdapter.java:201)
	at com.google.firestore.v1.FirestoreGrpc$MethodHandlers.invoke(FirestoreGrpc.java:1199)
	at io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:346)
	at io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:860)
	at io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)
	at io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:133)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:101)
	... 24 more

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:36:02 PM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError\nWARNING: Operation failed: Error compiling rules:\nL122:22 Unexpected 'null'.\nL122:22 mismatched input 'null' expecting IDENTIFIER\nL122:27 An unsupported type identifier was used with the 'is' operator. Received null. Expected one of bool,bytes,constraint,duration,float,int,latlng,list,set,number,map,string,timestamp,path,map_diff\nL122:48 mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}\nL149:40 Unexpected '='.\nL149:64 mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}\nL153:3 Unexpected '}'.\ncom.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:\nL122:22 Unexpected 'null'.\nL122:22 mismatched input 'null' expecting IDENTIFIER\nL122:27 An unsupported type identifier was used with the 'is' operator. Received null. Expected one of bool,bytes,constraint,duration,float,int,latlng,list,set,number,map,string,timestamp,path,map_diff\nL122:48 mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}\nL149:40 Unexpected '='.\nL149:64 mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}\nL153:3 Unexpected '}'.\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:115)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:74)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.getAuthorizer(EmulatorRulesCompiler.java:67)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.listCollectionIds(CloudFirestoreV1.java:642)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1Router.listCollectionIds(CloudFirestoreV1Router.java:212)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.lambda$listCollectionIds$12(FirestoreV1GrpcAdapter.java:201)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.unary(FirestoreV1GrpcAdapter.java:70)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.listCollectionIds(FirestoreV1GrpcAdapter.java:201)\n\tat com.google.firestore.v1.FirestoreGrpc$MethodHandlers.invoke(FirestoreGrpc.java:1199)\n\tat io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:346)\n\tat io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:860)\n\tat io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)\n\tat io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:133)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\tat java.base/java.lang.Thread.run(Thread.java:840)\nCaused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:101)\n\t... 24 more\n\n"}}
[debug] [2024-01-04T22:36:02.252Z] Jan 04, 2024 10:36:02 PM io.gapi.emulators.netty.HttpHandler$1 onError
INFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:
L122:22 Unexpected 'null'.
L122:22 mismatched input 'null' expecting IDENTIFIER
L122:27 An unsupported type identifier was used with the 'is' operator. Received null. Expected one of bool,bytes,constraint,duration,float,int,latlng,list,set,number,map,string,timestamp,path,map_diff
L122:48 mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}
L149:40 Unexpected '='.
L149:64 mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}
L153:3 Unexpected '}'.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:36:02 PM io.gapi.emulators.netty.HttpHandler$1 onError\nINFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:\nL122:22 Unexpected 'null'.\nL122:22 mismatched input 'null' expecting IDENTIFIER\nL122:27 An unsupported type identifier was used with the 'is' operator. Received null. Expected one of bool,bytes,constraint,duration,float,int,latlng,list,set,number,map,string,timestamp,path,map_diff\nL122:48 mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}\nL149:40 Unexpected '='.\nL149:64 mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}\nL153:3 Unexpected '}'.\n"}}
[debug] [2024-01-04T22:36:02.378Z] Jan 04, 2024 10:36:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:36:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:36:02.390Z] Jan 04, 2024 10:36:02 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:36:02 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\n"}}
[debug] [2024-01-04T22:36:02.393Z] Jan 04, 2024 10:36:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:36:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:36:02.398Z] Jan 04, 2024 10:36:02 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreListenHandler onClose
INFO: channel closed
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:36:02 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreListenHandler onClose\nINFO: channel closed\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:36:07.775Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:36:07.778Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string &&\n        // Additional optional fields\n        (data.uid is null || data.uid is string) &&\n        (data.imageUrl is null || data.imageUrl is string);\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n        return candidateIds is list &&\n        candidateIds.size() > 0 &&\n        candidateIds.every(candidateId => candidateId is string);\n      }\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:36:07.787Z] Jan 04, 2024 10:36:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:36:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:36:07.955Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:36:07.955Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":122,"column":22,"currentOffset":5537,"endOffset":5540},"description":"Unexpected 'null'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":122,"column":22,"currentOffset":5537,"endOffset":5540},"description":"mismatched input 'null' expecting IDENTIFIER","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":122,"column":27,"currentOffset":5542,"endOffset":5543},"description":"An unsupported type identifier was used with the 'is' operator. Received null. Expected one of bool,bytes,constraint,duration,float,int,latlng,list,set,number,map,string,timestamp,path,map_diff","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":122,"column":48,"currentOffset":5563,"endOffset":5563},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":149,"column":40,"currentOffset":6712,"endOffset":6712},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":149,"column":64,"currentOffset":6736,"endOffset":6736},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":153,"column":3,"currentOffset":6756,"endOffset":6756},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:122:22 - ERROR Unexpected 'null'. 
[warn] ⚠  firestore.rules:122:22 - ERROR mismatched input 'null' expecting IDENTIFIER 
[warn] ⚠  firestore.rules:122:27 - ERROR An unsupported type identifier was used with the 'is' operator. Received null. Expected one of bool,bytes,constraint,duration,float,int,latlng,list,set,number,map,string,timestamp,path,map_diff 
[warn] ⚠  firestore.rules:122:48 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:149:40 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:149:64 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:153:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:36:49.864Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:36:49.865Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n        return candidateIds is list &&\n        candidateIds.size() > 0 &&\n        candidateIds.every(candidateId => candidateId is string);\n      }\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:36:49.877Z] Jan 04, 2024 10:36:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:36:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:36:49.955Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:36:49.955Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":146,"column":40,"currentOffset":6560,"endOffset":6560},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":146,"column":64,"currentOffset":6584,"endOffset":6584},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":151,"column":1,"currentOffset":6606,"endOffset":6606},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:146:40 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:146:64 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:151:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:37:36.653Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:37:36.654Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n        return candidateIds is list &&\n        candidateIds.size() > 0 ;\n        // &&\n        // candidateIds.every(candidateId => candidateId is string);\n      }\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:37:36.656Z] Jan 04, 2024 10:37:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:37:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:37:37.118Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:37:37.118Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":12,"column":14,"currentOffset":457,"endOffset":468},"description":"Unused function: isValidEmail.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":44,"column":14,"currentOffset":1852,"endOffset":1867},"description":"Unused function: isValidFirstName.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":50,"column":14,"currentOffset":2111,"endOffset":2125},"description":"Unused function: isValidLastName.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":53,"column":59,"currentOffset":2321,"endOffset":2329},"description":"Invalid variable name: firstName.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":92,"column":60,"currentOffset":4344,"endOffset":4346},"description":"Invalid function name: now.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":98,"column":56,"currentOffset":4593,"endOffset":4595},"description":"Invalid function name: now.","severity":"WARNING"}]}
[warn] ⚠  firestore.rules:12:14 - WARNING Unused function: isValidEmail. 
[warn] ⚠  firestore.rules:44:14 - WARNING Unused function: isValidFirstName. 
[warn] ⚠  firestore.rules:50:14 - WARNING Unused function: isValidLastName. 
[warn] ⚠  firestore.rules:53:59 - WARNING Invalid variable name: firstName. 
[warn] ⚠  firestore.rules:92:60 - WARNING Invalid function name: now. 
[warn] ⚠  firestore.rules:98:56 - WARNING Invalid function name: now. 
[info] ✔  firestore: Rules updated. 
[debug] [2024-01-04T22:37:56.995Z] Jan 04, 2024 10:37:56 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:37:56 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2024-01-04T22:37:57.017Z] Jan 04, 2024 10:37:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:37:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:37:57.089Z] Jan 04, 2024 10:37:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:37:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:38:17.166Z] Jan 04, 2024 10:38:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:38:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:38:43.941Z] Jan 04, 2024 10:38:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:38:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:39:05.744Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:39:05.744Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n        return candidateIds is list &&\n        candidateIds.size() > 0 ;\n        // &&\n        candidateIds.every(candidateId => candidateId is string);\n      }\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:39:05.747Z] Jan 04, 2024 10:39:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:39:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:39:05.788Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:39:05.788Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":147,"column":9,"currentOffset":6542,"endOffset":6553},"description":"mismatched input 'candidateIds' expecting '}'","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":152,"column":1,"currentOffset":6619,"endOffset":6619},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:147:9 - ERROR mismatched input 'candidateIds' expecting '}' 
[warn] ⚠  firestore.rules:152:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:39:08.141Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:39:08.141Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n        return candidateIds is list &&\n        candidateIds.size() > 0 ;\n        // &&\n        candidateIds.every(candidateId => candidateId is string);\n      }\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:39:08.171Z] Jan 04, 2024 10:39:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:39:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:39:08.255Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:39:08.255Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":147,"column":9,"currentOffset":6542,"endOffset":6553},"description":"mismatched input 'candidateIds' expecting '}'","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":152,"column":1,"currentOffset":6619,"endOffset":6619},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:147:9 - ERROR mismatched input 'candidateIds' expecting '}' 
[warn] ⚠  firestore.rules:152:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:39:47.469Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:39:47.469Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.every(candidateId => candidateId is string);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:39:47.471Z] Jan 04, 2024 10:39:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:39:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:39:47.508Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:39:47.508Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":146,"column":36,"currentOffset":6534,"endOffset":6534},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":146,"column":60,"currentOffset":6558,"endOffset":6558},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":151,"column":1,"currentOffset":6574,"endOffset":6574},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:146:36 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:146:60 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:151:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:39:52.531Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:39:52.531Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.every(candidateId => candidateId is string);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:39:52.538Z] Jan 04, 2024 10:39:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:39:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:39:52.641Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:39:52.642Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":146,"column":36,"currentOffset":6534,"endOffset":6534},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":146,"column":60,"currentOffset":6558,"endOffset":6558},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":151,"column":1,"currentOffset":6574,"endOffset":6574},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:146:36 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:146:60 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:151:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:39:53.261Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:39:53.261Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.every(candidateId => candidateId is string);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:39:53.263Z] Jan 04, 2024 10:39:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:39:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:39:53.297Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:39:53.298Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":146,"column":36,"currentOffset":6534,"endOffset":6534},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":146,"column":60,"currentOffset":6558,"endOffset":6558},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":151,"column":1,"currentOffset":6574,"endOffset":6574},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:146:36 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:146:60 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:151:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[debug] [2024-01-04T22:40:00.959Z] Jan 04, 2024 10:40:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:40:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:40:22.092Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:40:22.092Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.every(candidateId => candidateId is string);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:40:22.100Z] Jan 04, 2024 10:40:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:40:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:40:22.212Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:40:22.212Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":146,"column":36,"currentOffset":6534,"endOffset":6534},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":146,"column":60,"currentOffset":6558,"endOffset":6558},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":151,"column":1,"currentOffset":6574,"endOffset":6574},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:146:36 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:146:60 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:151:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:40:45.943Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:40:45.944Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.every(candidateId => (candidateId is string));\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:40:45.946Z] Jan 04, 2024 10:40:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:40:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:40:45.982Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:40:45.983Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":146,"column":36,"currentOffset":6534,"endOffset":6534},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":146,"column":62,"currentOffset":6560,"endOffset":6560},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', ')', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":151,"column":1,"currentOffset":6576,"endOffset":6576},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:146:36 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:146:62 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', ')', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:151:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[debug] [2024-01-04T22:40:47.076Z] Jan 04, 2024 10:40:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:40:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:40:47.258Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:40:47.259Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.every(candidateId => (candidateId is string));\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:40:47.260Z] Jan 04, 2024 10:40:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:40:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:40:47.288Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:40:47.288Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":146,"column":36,"currentOffset":6534,"endOffset":6534},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":146,"column":62,"currentOffset":6560,"endOffset":6560},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', ')', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":151,"column":1,"currentOffset":6576,"endOffset":6576},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:146:36 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:146:62 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', ')', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:151:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:41:42.024Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:41:42.024Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n\n        if (!(candidateIds is list && candidateIds.size() > 0)) {\n        return false;\n      }\n\n      // Iterate over candidateIds and check the type individually\n      for (var i = 0; i < candidateIds.size(); i++) {\n      if (!(candidateIds[i] is string)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:41:42.028Z] Jan 04, 2024 10:41:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:41:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:41:42.081Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:41:42.081Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":145,"column":9,"currentOffset":6456,"endOffset":6457},"description":"Unexpected 'if'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":150,"column":7,"currentOffset":6618,"endOffset":6620},"description":"Unexpected 'for'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":156,"column":3,"currentOffset":6741,"endOffset":6746},"description":"Unexpected 'return'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:145:9 - ERROR Unexpected 'if'. 
[warn] ⚠  firestore.rules:150:7 - ERROR Unexpected 'for'. 
[warn] ⚠  firestore.rules:156:3 - ERROR Unexpected 'return'. 
[info] ✔  firestore: Rules updated. 
[debug] [2024-01-04T22:41:47.101Z] Jan 04, 2024 10:41:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:41:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:41:54.849Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:41:54.850Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n\n        if (!(candidateIds is list && candidateIds.size() > 0)) {\n        return false;\n      }\n\n      // Iterate over candidateIds and check the type individually\n      for (var i = 0; i < candidateIds.size(); i++) {\n      if (!(candidateIds[i] is string)) {\n      return false;\n    }\n  }\n}\n\nreturn true;\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:41:54.858Z] Jan 04, 2024 10:41:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:41:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:41:54.979Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:41:54.979Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":145,"column":9,"currentOffset":6456,"endOffset":6457},"description":"Unexpected 'if'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":150,"column":7,"currentOffset":6618,"endOffset":6620},"description":"Unexpected 'for'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":155,"column":1,"currentOffset":6738,"endOffset":6738},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:145:9 - ERROR Unexpected 'if'. 
[warn] ⚠  firestore.rules:150:7 - ERROR Unexpected 'for'. 
[warn] ⚠  firestore.rules:155:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[debug] [2024-01-04T22:42:34.119Z] Jan 04, 2024 10:42:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:42:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:43:11.995Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:43:11.995Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n\n        if (!(candidateIds is list && candidateIds.size() > 0)) {\n        return false;\n      }\n\n      // Iterate over candidateIds and check the type individually\n      for (var i = 0; i < candidateIds.size(); i++) {\n      if (!(candidateIds[i] is string)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:43:12.005Z] Jan 04, 2024 10:43:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:43:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:43:12.100Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:43:12.100Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":144,"column":9,"currentOffset":6399,"endOffset":6400},"description":"Unexpected 'if'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":149,"column":7,"currentOffset":6561,"endOffset":6563},"description":"Unexpected 'for'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":155,"column":3,"currentOffset":6684,"endOffset":6689},"description":"Unexpected 'return'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:144:9 - ERROR Unexpected 'if'. 
[warn] ⚠  firestore.rules:149:7 - ERROR Unexpected 'for'. 
[warn] ⚠  firestore.rules:155:3 - ERROR Unexpected 'return'. 
[info] ✔  firestore: Rules updated. 
[debug] [2024-01-04T22:43:34.135Z] Jan 04, 2024 10:43:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:43:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:44:06.177Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:44:06.178Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n     // Function to check if the candidateIds are valid\nfunction isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n\n  function isValidHelper(index) {\n    return index == candidateIds.size() ||\n      (candidateIds[index] is string && isValidHelper(index + 1));\n  }\n\n  return candidateIds is list && candidateIds.size() > 0 && isValidHelper(0);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:44:06.187Z] Jan 04, 2024 10:44:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:44:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:44:06.334Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:44:06.334Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":145,"column":3,"currentOffset":6431,"endOffset":6438},"description":"Unexpected 'function'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":150,"column":3,"currentOffset":6580,"endOffset":6585},"description":"Unexpected 'return'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":155,"column":1,"currentOffset":6669,"endOffset":6669},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:145:3 - ERROR Unexpected 'function'. 
[warn] ⚠  firestore.rules:150:3 - ERROR Unexpected 'return'. 
[warn] ⚠  firestore.rules:155:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[debug] [2024-01-04T22:44:20.161Z] Jan 04, 2024 10:44:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:44:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:44:32.500Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:44:32.500Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n     // Function to check if the candidateIds are valid\nfunction isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.size() == candidateIds.count(id => id is string);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:44:32.508Z] Jan 04, 2024 10:44:32 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:44:32 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:44:32.553Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:44:32.553Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":147,"column":50,"currentOffset":6542,"endOffset":6542},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":147,"column":65,"currentOffset":6557,"endOffset":6557},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":152,"column":1,"currentOffset":6573,"endOffset":6573},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:147:50 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:147:65 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:152:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:44:35.436Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:44:35.436Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n     // Function to check if the candidateIds are valid\nfunction isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.size() == candidateIds.count(id => id is string);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:44:35.444Z] Jan 04, 2024 10:44:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:44:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:44:35.493Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:44:35.493Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":147,"column":50,"currentOffset":6542,"endOffset":6542},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":147,"column":65,"currentOffset":6557,"endOffset":6557},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":152,"column":1,"currentOffset":6573,"endOffset":6573},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:147:50 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:147:65 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:152:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:44:36.138Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:44:36.139Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n     // Function to check if the candidateIds are valid\nfunction isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.size() == candidateIds.count(id => id is string);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:44:36.148Z] Jan 04, 2024 10:44:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:44:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:44:36.264Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:44:36.264Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":147,"column":50,"currentOffset":6542,"endOffset":6542},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":147,"column":65,"currentOffset":6557,"endOffset":6557},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":152,"column":1,"currentOffset":6573,"endOffset":6573},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:147:50 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:147:65 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:152:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:44:36.441Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:44:36.441Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n     // Function to check if the candidateIds are valid\nfunction isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.size() == candidateIds.count(id => id is string);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:44:36.445Z] Jan 04, 2024 10:44:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:44:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:44:36.470Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:44:36.470Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":147,"column":50,"currentOffset":6542,"endOffset":6542},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":147,"column":65,"currentOffset":6557,"endOffset":6557},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":152,"column":1,"currentOffset":6573,"endOffset":6573},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:147:50 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:147:65 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:152:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:44:36.627Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:44:36.628Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n     // Function to check if the candidateIds are valid\nfunction isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.size() == candidateIds.count(id => id is string);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:44:36.644Z] Jan 04, 2024 10:44:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:44:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:44:36.729Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:44:36.729Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":147,"column":50,"currentOffset":6542,"endOffset":6542},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":147,"column":65,"currentOffset":6557,"endOffset":6557},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":152,"column":1,"currentOffset":6573,"endOffset":6573},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:147:50 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:147:65 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:152:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:44:36.883Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:44:36.884Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n     // Function to check if the candidateIds are valid\nfunction isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.size() == candidateIds.count(id => id is string);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:44:36.890Z] Jan 04, 2024 10:44:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:44:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:44:37.006Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:44:37.006Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":147,"column":50,"currentOffset":6542,"endOffset":6542},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":147,"column":65,"currentOffset":6557,"endOffset":6557},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":152,"column":1,"currentOffset":6573,"endOffset":6573},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:147:50 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:147:65 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:152:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:44:37.178Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:44:37.178Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n     // Function to check if the candidateIds are valid\nfunction isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.size() == candidateIds.count(id => id is string);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:44:37.183Z] Jan 04, 2024 10:44:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:44:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:44:37.286Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:44:37.286Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":147,"column":50,"currentOffset":6542,"endOffset":6542},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":147,"column":65,"currentOffset":6557,"endOffset":6557},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":152,"column":1,"currentOffset":6573,"endOffset":6573},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:147:50 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:147:65 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:152:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:44:37.493Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:44:37.494Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n     // Function to check if the candidateIds are valid\nfunction isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.size() == candidateIds.count(id => id is string);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:44:37.495Z] Jan 04, 2024 10:44:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:44:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:44:37.533Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:44:37.534Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":147,"column":50,"currentOffset":6542,"endOffset":6542},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":147,"column":65,"currentOffset":6557,"endOffset":6557},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":152,"column":1,"currentOffset":6573,"endOffset":6573},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:147:50 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:147:65 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:152:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:44:37.681Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:44:37.681Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n     // Function to check if the candidateIds are valid\nfunction isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.size() == candidateIds.count(id => id is string);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:44:37.682Z] Jan 04, 2024 10:44:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:44:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:44:37.707Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:44:37.707Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":147,"column":50,"currentOffset":6542,"endOffset":6542},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":147,"column":65,"currentOffset":6557,"endOffset":6557},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":152,"column":1,"currentOffset":6573,"endOffset":6573},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:147:50 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:147:65 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:152:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:44:38.086Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:44:38.086Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n     // Function to check if the candidateIds are valid\nfunction isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.size() == candidateIds.count(id => id is string);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:44:38.087Z] Jan 04, 2024 10:44:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:44:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:44:38.113Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:44:38.113Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":147,"column":50,"currentOffset":6542,"endOffset":6542},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":147,"column":65,"currentOffset":6557,"endOffset":6557},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":152,"column":1,"currentOffset":6573,"endOffset":6573},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:147:50 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:147:65 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:152:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:44:38.341Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:44:38.341Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n     // Function to check if the candidateIds are valid\nfunction isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.size() == candidateIds.count(id => id is string);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:44:38.347Z] Jan 04, 2024 10:44:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:44:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:44:38.387Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:44:38.387Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":147,"column":50,"currentOffset":6542,"endOffset":6542},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":147,"column":65,"currentOffset":6557,"endOffset":6557},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":152,"column":1,"currentOffset":6573,"endOffset":6573},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:147:50 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:147:65 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:152:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:44:38.622Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:44:38.622Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n     // Function to check if the candidateIds are valid\nfunction isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.size() == candidateIds.count(id => id is string);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:44:38.625Z] Jan 04, 2024 10:44:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:44:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:44:38.651Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:44:38.651Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":147,"column":50,"currentOffset":6542,"endOffset":6542},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":147,"column":65,"currentOffset":6557,"endOffset":6557},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":152,"column":1,"currentOffset":6573,"endOffset":6573},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:147:50 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:147:65 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:152:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:44:39.041Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:44:39.041Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n     // Function to check if the candidateIds are valid\nfunction isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.size() == candidateIds.count(id => id is string);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:44:39.043Z] Jan 04, 2024 10:44:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:44:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:44:39.068Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:44:39.068Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":147,"column":50,"currentOffset":6542,"endOffset":6542},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":147,"column":65,"currentOffset":6557,"endOffset":6557},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":152,"column":1,"currentOffset":6573,"endOffset":6573},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:147:50 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:147:65 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:152:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:44:39.598Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:44:39.598Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n     // Function to check if the candidateIds are valid\nfunction isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.size() == candidateIds.count(id => id is string);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:44:39.610Z] Jan 04, 2024 10:44:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:44:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:44:39.641Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:44:39.641Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":147,"column":50,"currentOffset":6542,"endOffset":6542},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":147,"column":65,"currentOffset":6557,"endOffset":6557},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":152,"column":1,"currentOffset":6573,"endOffset":6573},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:147:50 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:147:65 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:152:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:44:39.999Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:44:39.999Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n     // Function to check if the candidateIds are valid\nfunction isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.size() == candidateIds.count(id => id is string);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:44:40.001Z] Jan 04, 2024 10:44:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:44:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:44:40.025Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:44:40.025Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":147,"column":50,"currentOffset":6542,"endOffset":6542},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":147,"column":65,"currentOffset":6557,"endOffset":6557},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":152,"column":1,"currentOffset":6573,"endOffset":6573},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:147:50 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:147:65 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:152:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:44:40.373Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:44:40.373Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n     // Function to check if the candidateIds are valid\nfunction isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.size() == candidateIds.count(id => id is string);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:44:40.375Z] Jan 04, 2024 10:44:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:44:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:44:40.400Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:44:40.400Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":147,"column":50,"currentOffset":6542,"endOffset":6542},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":147,"column":65,"currentOffset":6557,"endOffset":6557},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":152,"column":1,"currentOffset":6573,"endOffset":6573},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:147:50 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:147:65 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:152:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:44:40.668Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:44:40.669Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n     // Function to check if the candidateIds are valid\nfunction isValidCandidateIds(candidateIds) {\n  // Add your specific logic for validating the list of candidateIds\n  // For example, ensure that each candidateId is a string\n\n  return candidateIds is list &&\n    candidateIds.size() > 0 &&\n    candidateIds.size() == candidateIds.count(id => id is string);\n}\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:44:40.676Z] Jan 04, 2024 10:44:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:44:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:44:40.723Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:44:40.724Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":147,"column":50,"currentOffset":6542,"endOffset":6542},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":147,"column":65,"currentOffset":6557,"endOffset":6557},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":152,"column":1,"currentOffset":6573,"endOffset":6573},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:147:50 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:147:65 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:152:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:44:43.915Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:44:43.915Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n\n        return candidateIds is list &&\n        candidateIds.size() > 0 &&\n        candidateIds.size() == candidateIds.count(id => id is string);\n      }\n    }\n\n  }\n}\n"}]}}
[debug] [2024-01-04T22:44:43.925Z] Jan 04, 2024 10:44:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:44:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:44:43.974Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:44:43.974Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":147,"column":54,"currentOffset":6575,"endOffset":6575},"description":"Unexpected '='.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":147,"column":69,"currentOffset":6590,"endOffset":6590},"description":"mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":152,"column":1,"currentOffset":6612,"endOffset":6612},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:147:54 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:147:69 - ERROR mismatched input ')' expecting {'&&', '==', '>', '>=', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:152:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[debug] [2024-01-04T22:45:20.171Z] Jan 04, 2024 10:45:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:45:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:45:41.027Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:45:41.028Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n        return candidateIds is list &&\n        candidateIds.size() > 0 &&\n        candidateIds.size() == candidateIds.each(function(candidateId) {\n          return candidateId is string;\n        }).size();\n        \n      }\n    }\n  }\n}\n"}]}}
[debug] [2024-01-04T22:45:41.034Z] Jan 04, 2024 10:45:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:45:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:45:41.084Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:45:41.084Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":146,"column":49,"currentOffset":6569,"endOffset":6569},"description":"mismatched input '(' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":146,"column":58,"currentOffset":6578,"endOffset":6578},"description":"Missing 'function' id","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":148,"column":10,"currentOffset":6643,"endOffset":6643},"description":"Unexpected ')'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":153,"column":1,"currentOffset":6680,"endOffset":6680},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:146:49 - ERROR mismatched input '(' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:146:58 - ERROR Missing 'function' id 
[warn] ⚠  firestore.rules:148:10 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:153:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[debug] [2024-01-04T22:46:06.196Z] Jan 04, 2024 10:46:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:46:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:46:06.918Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:46:06.918Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n        return candidateIds is list &&\n        candidateIds.size() > 0 &&\n        \n      }\n    }\n  }\n}\n"}]}}
[debug] [2024-01-04T22:46:06.949Z] Jan 04, 2024 10:46:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:46:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:46:06.967Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:46:06.968Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":147,"column":7,"currentOffset":6536,"endOffset":6536},"description":"mismatched input '}' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES}","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:147:7 - ERROR mismatched input '}' expecting {'--', '++', '{', '[', '(', '-', '!', '/', 'false', 'null', 'true', PATH_SEGMENT, IDENTIFIER, NUM_INT, NUM_FLOAT, UNPAIRED_DOUBLE_QUOTE, UNPAIRED_SINGLE_QUOTE, STRING, BYTES} 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T22:46:16.357Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T22:46:16.357Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      allow read, write: if isUserAdmin(request.auth.uid) &&\n      isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n        return candidateIds is list &&\n        candidateIds.size() > 0;\n        \n      }\n    }\n  }\n}\n"}]}}
[debug] [2024-01-04T22:46:16.362Z] Jan 04, 2024 10:46:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:46:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:46:16.532Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T22:46:16.532Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":12,"column":14,"currentOffset":457,"endOffset":468},"description":"Unused function: isValidEmail.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":44,"column":14,"currentOffset":1852,"endOffset":1867},"description":"Unused function: isValidFirstName.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":50,"column":14,"currentOffset":2111,"endOffset":2125},"description":"Unused function: isValidLastName.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":53,"column":59,"currentOffset":2321,"endOffset":2329},"description":"Invalid variable name: firstName.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":92,"column":60,"currentOffset":4344,"endOffset":4346},"description":"Invalid function name: now.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":98,"column":56,"currentOffset":4593,"endOffset":4595},"description":"Invalid function name: now.","severity":"WARNING"}]}
[warn] ⚠  firestore.rules:12:14 - WARNING Unused function: isValidEmail. 
[warn] ⚠  firestore.rules:44:14 - WARNING Unused function: isValidFirstName. 
[warn] ⚠  firestore.rules:50:14 - WARNING Unused function: isValidLastName. 
[warn] ⚠  firestore.rules:53:59 - WARNING Invalid variable name: firstName. 
[warn] ⚠  firestore.rules:92:60 - WARNING Invalid function name: now. 
[warn] ⚠  firestore.rules:98:56 - WARNING Invalid function name: now. 
[info] ✔  firestore: Rules updated. 
[debug] [2024-01-04T22:46:52.225Z] Jan 04, 2024 10:46:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:46:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:47:38.297Z] Jan 04, 2024 10:47:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:47:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:48:54.352Z] Jan 04, 2024 10:48:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:48:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:50:10.379Z] Jan 04, 2024 10:50:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:50:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:51:26.497Z] Jan 04, 2024 10:51:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:51:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:52:26.507Z] Jan 04, 2024 10:52:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:52:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:53:12.690Z] Jan 04, 2024 10:53:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:53:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:53:58.736Z] Jan 04, 2024 10:53:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:53:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:54:44.757Z] Jan 04, 2024 10:54:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:54:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:55:31.773Z] Jan 04, 2024 10:55:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:55:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:56:47.802Z] Jan 04, 2024 10:56:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:56:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:58:03.854Z] Jan 04, 2024 10:58:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:58:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T22:59:03.883Z] Jan 04, 2024 10:59:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 10:59:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:00:03.917Z] Jan 04, 2024 11:00:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:00:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:01:19.954Z] Jan 04, 2024 11:01:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:01:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:02:35.994Z] Jan 04, 2024 11:02:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:02:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:03:22.023Z] Jan 04, 2024 11:03:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:03:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:04:08.056Z] Jan 04, 2024 11:04:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:04:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:05:08.091Z] Jan 04, 2024 11:05:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:05:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:06:08.116Z] Jan 04, 2024 11:06:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:06:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:06:54.155Z] Jan 04, 2024 11:06:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:06:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:07:41.184Z] Jan 04, 2024 11:07:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:07:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:08:41.208Z] Jan 04, 2024 11:08:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:08:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:09:41.227Z] Jan 04, 2024 11:09:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:09:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:10:57.259Z] Jan 04, 2024 11:10:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:10:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:12:13.323Z] Jan 04, 2024 11:12:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:12:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:13:13.367Z] Jan 04, 2024 11:13:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:13:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:14:29.393Z] Jan 04, 2024 11:14:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:14:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:15:15.422Z] Jan 04, 2024 11:15:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:15:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:16:01.439Z] Jan 04, 2024 11:16:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:16:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:17:17.474Z] Jan 04, 2024 11:17:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:17:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:18:04.523Z] Jan 04, 2024 11:18:04 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:18:04 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:19:04.531Z] Jan 04, 2024 11:19:04 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:19:04 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:20:20.569Z] Jan 04, 2024 11:20:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:20:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:21:20.584Z] Jan 04, 2024 11:21:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:21:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:22:36.621Z] Jan 04, 2024 11:22:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:22:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:23:22.646Z] Jan 04, 2024 11:23:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:23:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:24:08.660Z] Jan 04, 2024 11:24:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:24:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:24:54.674Z] Jan 04, 2024 11:24:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:24:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:24:57.288Z] >>> [apiv2][query] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast [none]
[debug] [2024-01-04T23:24:57.288Z] >>> [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"eventId":"16a4082a-cb25-48f4-8f40-caed594ccc28","eventType":"providers/firebase.auth/eventTypes/user.create","resource":{"name":"projects/ptate-df901","service":"firebaseauth.googleapis.com"},"params":{},"timestamp":"2024-01-04T23:24:57.288Z","data":{"uid":"awLHWJ3kpusfER1rvL2PZeG0U2fY","email":"lucymaber2@gmail.com","emailVerified":false,"metadata":{"creationTime":"2024-01-04T23:24:57.286Z","lastSignInTime":"2024-01-04T23:24:57.286Z"},"customClaims":{},"providerData":[{"providerId":"password","email":"lucymaber2@gmail.com","federatedId":"lucymaber2@gmail.com","rawId":"lucymaber2@gmail.com"}]}}
[debug] [2024-01-04T23:24:57.296Z] <<< [apiv2][status] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast 200
[debug] [2024-01-04T23:24:57.296Z] <<< [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"status":"multicast_acknowledged"}
[debug] [2024-01-04T23:24:57.353Z] Jan 04, 2024 11:24:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:24:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:24:57.375Z] Jan 04, 2024 11:24:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:24:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:24:57.384Z] Jan 04, 2024 11:24:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:24:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:24:57.648Z] Jan 04, 2024 11:24:57 PM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError
WARNING: Operation failed: 
false for 'create' @ L57, evaluation error at L66:29 for 'create' @ L66, false for 'update' @ L57, evaluation error at L66:29 for 'update' @ L66, false for 'create' @ L57, Service call error. Function: [get], Argument: [path_value {
  segments {
    simple: "databases"
  }
  segments {
    simple: "(default)"
  }
  segments {
    simple: "documents"
  }
  segments {
    simple: "users"
  }
  segments {
    simple: "awLHWJ3kpusfER1rvL2PZeG0U2fY"
  }
}
]. for 'create' @ L66
com.google.cloud.datastore.core.exception.DatastoreException: 
false for 'create' @ L57, evaluation error at L66:29 for 'create' @ L66, false for 'update' @ L57, evaluation error at L66:29 for 'update' @ L66, false for 'create' @ L57, Service call error. Function: [get], Argument: [path_value {
  segments {
    simple: "databases"
  }
  segments {
    simple: "(default)"
  }
  segments {
    simple: "documents"
  }
  segments {
    simple: "users"
  }
  segments {
    simple: "awLHWJ3kpusfER1rvL2PZeG0U2fY"
  }
}
]. for 'create' @ L66
	at com.google.cloud.datastore.core.exception.DatastoreException$Builder.build(DatastoreException.java:120)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.verboseError(EmulatorRulesAuthorizer.java:321)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.withVerboseErrors(EmulatorRulesAuthorizer.java:298)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.checkCommit(EmulatorRulesAuthorizer.java:130)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.commitHelper(CloudFirestoreV1.java:1045)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:955)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:942)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.write(CloudFirestoreV1.java:930)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.handleRequest(CloudFirestoreV1WriteStream.java:210)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.write(CloudFirestoreV1WriteStream.java:138)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:93)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:26)
	at com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:160)
	at com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:130)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.onMessage(ChannelInternalImpl.java:525)
	at com.google.net.webchannel.server.v8.ForwardChannel.deliverMessage(ForwardChannel.java:114)
	at com.google.net.webchannel.server.v8.ForwardChannel.processPendingRequest(ForwardChannel.java:93)
	at com.google.net.webchannel.server.v8.ForwardChannel.consume(ForwardChannel.java:67)
	at com.google.net.webchannel.server.v8.ForwardChannel.add(ForwardChannel.java:60)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.handleRequestBody(ChannelInternalImpl.java:290)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.processSessionRequest(ChannelInternalImpl.java:357)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.handle(ChannelInternalImpl.java:172)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.consume(ChannelInternalImpl.java:91)
	at com.google.net.webchannel.server.common.ChannelProcessor.run(ChannelProcessor.java:86)
Caused by: com.google.firebase.rules.runtime.common.EvaluationException: Error: security.rules line [37], column [14]. Service call error. Function: [get], Argument: [path_value {
  segments {
    simple: "databases"
  }
  segments {
    simple: "(default)"
  }
  segments {
    simple: "documents"
  }
  segments {
    simple: "users"
  }
  segments {
    simple: "awLHWJ3kpusfER1rvL2PZeG0U2fY"
  }
}
].
	at com.google.firebase.rules.runtime.impl.DefaultEvaluator$TransformEvaluationException.apply(DefaultEvaluator.java:275)
	at com.google.firebase.rules.runtime.impl.DefaultEvaluator$TransformEvaluationException.apply(DefaultEvaluator.java:261)
	at com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture.doFallback(AbstractCatchingFuture.java:206)
	at com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture.doFallback(AbstractCatchingFuture.java:193)
	at com.google.common.util.concurrent.AbstractCatchingFuture.run(AbstractCatchingFuture.java:135)
	at com.google.common.util.concurrent.DirectExecutor.execute(DirectExecutor.java:32)
	at com.google.common.util.concurrent.AbstractFuture.executeListener(AbstractFuture.java:1293)
	at com.google.common.util.concurrent.AbstractFuture.addListener(AbstractFuture.java:764)
	at com.google.common.util.concurrent.FluentFuture$TrustedFuture.addListener(FluentFuture.java:122)
	at com.google.common.util.concurrent.AbstractCatchingFuture.create(AbstractCatchingFuture.java:58)
	at com.google.common.util.concurrent.Futures.catchingAsync(Futures.java:411)
	at com.google.firebase.rules.runtime.impl.DefaultEvaluator.evaluate(DefaultEvaluator.java:177)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRuleClient$EmulatorRuleEvaluator.evaluate(EmulatorRuleClient.java:84)
	at com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer.lambda$fullEvaluate$9(AsyncTwoPhaseRulesAuthorizer.java:944)
	at com.google.cloud.datastore.computation.Computation.tryCatch(Computation.java:373)
	at com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer.fullEvaluate(AsyncTwoPhaseRulesAuthorizer.java:943)
	at com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer$CommitAuthorizerImpl.lambda$checkWrite$1(AsyncTwoPhaseRulesAuthorizer.java:1176)
	at com.google.cloud.datastore.computation.Computation.lambda$tryClose$26(Computation.java:642)
	at com.google.cloud.datastore.computation.Computation.tryCatch(Computation.java:373)
	at com.google.cloud.datastore.computation.Computation.tryFinally(Computation.java:609)
	at com.google.cloud.datastore.computation.Computation.tryFinally(Computation.java:615)
	at com.google.cloud.datastore.computation.Computation.tryClose(Computation.java:642)
	at com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer$CommitAuthorizerImpl.checkWrite(AsyncTwoPhaseRulesAuthorizer.java:1145)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.lambda$checkCommit$0(EmulatorRulesAuthorizer.java:140)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.withVerboseErrors(EmulatorRulesAuthorizer.java:293)
	... 21 more

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:24:57 PM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError\nWARNING: Operation failed: \nfalse for 'create' @ L57, evaluation error at L66:29 for 'create' @ L66, false for 'update' @ L57, evaluation error at L66:29 for 'update' @ L66, false for 'create' @ L57, Service call error. Function: [get], Argument: [path_value {\n  segments {\n    simple: \"databases\"\n  }\n  segments {\n    simple: \"(default)\"\n  }\n  segments {\n    simple: \"documents\"\n  }\n  segments {\n    simple: \"users\"\n  }\n  segments {\n    simple: \"awLHWJ3kpusfER1rvL2PZeG0U2fY\"\n  }\n}\n]. for 'create' @ L66\ncom.google.cloud.datastore.core.exception.DatastoreException: \nfalse for 'create' @ L57, evaluation error at L66:29 for 'create' @ L66, false for 'update' @ L57, evaluation error at L66:29 for 'update' @ L66, false for 'create' @ L57, Service call error. Function: [get], Argument: [path_value {\n  segments {\n    simple: \"databases\"\n  }\n  segments {\n    simple: \"(default)\"\n  }\n  segments {\n    simple: \"documents\"\n  }\n  segments {\n    simple: \"users\"\n  }\n  segments {\n    simple: \"awLHWJ3kpusfER1rvL2PZeG0U2fY\"\n  }\n}\n]. for 'create' @ L66\n\tat com.google.cloud.datastore.core.exception.DatastoreException$Builder.build(DatastoreException.java:120)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.verboseError(EmulatorRulesAuthorizer.java:321)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.withVerboseErrors(EmulatorRulesAuthorizer.java:298)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.checkCommit(EmulatorRulesAuthorizer.java:130)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.commitHelper(CloudFirestoreV1.java:1045)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:955)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:942)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.write(CloudFirestoreV1.java:930)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.handleRequest(CloudFirestoreV1WriteStream.java:210)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.write(CloudFirestoreV1WriteStream.java:138)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:93)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:26)\n\tat com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:160)\n\tat com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:130)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.onMessage(ChannelInternalImpl.java:525)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.deliverMessage(ForwardChannel.java:114)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.processPendingRequest(ForwardChannel.java:93)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.consume(ForwardChannel.java:67)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.add(ForwardChannel.java:60)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.handleRequestBody(ChannelInternalImpl.java:290)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.processSessionRequest(ChannelInternalImpl.java:357)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.handle(ChannelInternalImpl.java:172)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.consume(ChannelInternalImpl.java:91)\n\tat com.google.net.webchannel.server.common.ChannelProcessor.run(ChannelProcessor.java:86)\nCaused by: com.google.firebase.rules.runtime.common.EvaluationException: Error: security.rules line [37], column [14]. Service call error. Function: [get], Argument: [path_value {\n  segments {\n    simple: \"databases\"\n  }\n  segments {\n    simple: \"(default)\"\n  }\n  segments {\n    simple: \"documents\"\n  }\n  segments {\n    simple: \"users\"\n  }\n  segments {\n    simple: \"awLHWJ3kpusfER1rvL2PZeG0U2fY\"\n  }\n}\n].\n\tat com.google.firebase.rules.runtime.impl.DefaultEvaluator$TransformEvaluationException.apply(DefaultEvaluator.java:275)\n\tat com.google.firebase.rules.runtime.impl.DefaultEvaluator$TransformEvaluationException.apply(DefaultEvaluator.java:261)\n\tat com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture.doFallback(AbstractCatchingFuture.java:206)\n\tat com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture.doFallback(AbstractCatchingFuture.java:193)\n\tat com.google.common.util.concurrent.AbstractCatchingFuture.run(AbstractCatchingFuture.java:135)\n\tat com.google.common.util.concurrent.DirectExecutor.execute(DirectExecutor.java:32)\n\tat com.google.common.util.concurrent.AbstractFuture.executeListener(AbstractFuture.java:1293)\n\tat com.google.common.util.concurrent.AbstractFuture.addListener(AbstractFuture.java:764)\n\tat com.google.common.util.concurrent.FluentFuture$TrustedFuture.addListener(FluentFuture.java:122)\n\tat com.google.common.util.concurrent.AbstractCatchingFuture.create(AbstractCatchingFuture.java:58)\n\tat com.google.common.util.concurrent.Futures.catchingAsync(Futures.java:411)\n\tat com.google.firebase.rules.runtime.impl.DefaultEvaluator.evaluate(DefaultEvaluator.java:177)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRuleClient$EmulatorRuleEvaluator.evaluate(EmulatorRuleClient.java:84)\n\tat com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer.lambda$fullEvaluate$9(AsyncTwoPhaseRulesAuthorizer.java:944)\n\tat com.google.cloud.datastore.computation.Computation.tryCatch(Computation.java:373)\n\tat com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer.fullEvaluate(AsyncTwoPhaseRulesAuthorizer.java:943)\n\tat com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer$CommitAuthorizerImpl.lambda$checkWrite$1(AsyncTwoPhaseRulesAuthorizer.java:1176)\n\tat com.google.cloud.datastore.computation.Computation.lambda$tryClose$26(Computation.java:642)\n\tat com.google.cloud.datastore.computation.Computation.tryCatch(Computation.java:373)\n\tat com.google.cloud.datastore.computation.Computation.tryFinally(Computation.java:609)\n\tat com.google.cloud.datastore.computation.Computation.tryFinally(Computation.java:615)\n\tat com.google.cloud.datastore.computation.Computation.tryClose(Computation.java:642)\n\tat com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer$CommitAuthorizerImpl.checkWrite(AsyncTwoPhaseRulesAuthorizer.java:1145)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.lambda$checkCommit$0(EmulatorRulesAuthorizer.java:140)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.withVerboseErrors(EmulatorRulesAuthorizer.java:293)\n\t... 21 more\n\n"}}
[debug] [2024-01-04T23:24:57.660Z] Jan 04, 2024 11:24:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:24:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:24:57.665Z] Jan 04, 2024 11:24:57 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler onClose
INFO: channel closed
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:24:57 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler onClose\nINFO: channel closed\n"}}
[debug] [2024-01-04T23:26:10.703Z] Jan 04, 2024 11:26:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:26:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:26:20.868Z] >>> [apiv2][query] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast [none]
[debug] [2024-01-04T23:26:20.869Z] >>> [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"eventId":"279b63aa-2053-413e-a6ac-9a0f6e700358","eventType":"providers/firebase.auth/eventTypes/user.create","resource":{"name":"projects/ptate-df901","service":"firebaseauth.googleapis.com"},"params":{},"timestamp":"2024-01-04T23:26:20.868Z","data":{"uid":"at6tZLutK2AnQyq7oypawZulrzRw","email":"lucymaber0@gmail.com","emailVerified":false,"metadata":{"creationTime":"2024-01-04T23:26:20.868Z","lastSignInTime":"2024-01-04T23:26:20.868Z"},"customClaims":{},"providerData":[{"providerId":"password","email":"lucymaber0@gmail.com","federatedId":"lucymaber0@gmail.com","rawId":"lucymaber0@gmail.com"}]}}
[debug] [2024-01-04T23:26:20.872Z] <<< [apiv2][status] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast 200
[debug] [2024-01-04T23:26:20.872Z] <<< [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"status":"multicast_acknowledged"}
[debug] [2024-01-04T23:26:20.961Z] Jan 04, 2024 11:26:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:26:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:26:20.971Z] Jan 04, 2024 11:26:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:26:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:26:20.983Z] Jan 04, 2024 11:26:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:26:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:26:21.025Z] Jan 04, 2024 11:26:21 PM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError
WARNING: Operation failed: 
false for 'create' @ L57, evaluation error at L66:29 for 'create' @ L66, false for 'update' @ L57, evaluation error at L66:29 for 'update' @ L66, false for 'create' @ L57, Service call error. Function: [get], Argument: [path_value {
  segments {
    simple: "databases"
  }
  segments {
    simple: "(default)"
  }
  segments {
    simple: "documents"
  }
  segments {
    simple: "users"
  }
  segments {
    simple: "at6tZLutK2AnQyq7oypawZulrzRw"
  }
}
]. for 'create' @ L66
com.google.cloud.datastore.core.exception.DatastoreException: 
false for 'create' @ L57, evaluation error at L66:29 for 'create' @ L66, false for 'update' @ L57, evaluation error at L66:29 for 'update' @ L66, false for 'create' @ L57, Service call error. Function: [get], Argument: [path_value {
  segments {
    simple: "databases"
  }
  segments {
    simple: "(default)"
  }
  segments {
    simple: "documents"
  }
  segments {
    simple: "users"
  }
  segments {
    simple: "at6tZLutK2AnQyq7oypawZulrzRw"
  }
}
]. for 'create' @ L66
	at com.google.cloud.datastore.core.exception.DatastoreException$Builder.build(DatastoreException.java:120)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.verboseError(EmulatorRulesAuthorizer.java:321)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.withVerboseErrors(EmulatorRulesAuthorizer.java:298)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.checkCommit(EmulatorRulesAuthorizer.java:130)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.commitHelper(CloudFirestoreV1.java:1045)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:955)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:942)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.write(CloudFirestoreV1.java:930)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.handleRequest(CloudFirestoreV1WriteStream.java:210)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.write(CloudFirestoreV1WriteStream.java:138)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:93)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:26)
	at com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:160)
	at com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:130)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.onMessage(ChannelInternalImpl.java:525)
	at com.google.net.webchannel.server.v8.ForwardChannel.deliverMessage(ForwardChannel.java:114)
	at com.google.net.webchannel.server.v8.ForwardChannel.processPendingRequest(ForwardChannel.java:93)
	at com.google.net.webchannel.server.v8.ForwardChannel.consume(ForwardChannel.java:67)
	at com.google.net.webchannel.server.v8.ForwardChannel.add(ForwardChannel.java:60)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.handleRequestBody(ChannelInternalImpl.java:290)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.processSessionRequest(ChannelInternalImpl.java:357)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.handle(ChannelInternalImpl.java:172)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.consume(ChannelInternalImpl.java:91)
	at com.google.net.webchannel.server.common.ChannelProcessor.run(ChannelProcessor.java:86)
Caused by: com.google.firebase.rules.runtime.common.EvaluationException: Error: security.rules line [37], column [14]. Service call error. Function: [get], Argument: [path_value {
  segments {
    simple: "databases"
  }
  segments {
    simple: "(default)"
  }
  segments {
    simple: "documents"
  }
  segments {
    simple: "users"
  }
  segments {
    simple: "at6tZLutK2AnQyq7oypawZulrzRw"
  }
}
].
	at com.google.firebase.rules.runtime.impl.DefaultEvaluator$TransformEvaluationException.apply(DefaultEvaluator.java:275)
	at com.google.firebase.rules.runtime.impl.DefaultEvaluator$TransformEvaluationException.apply(DefaultEvaluator.java:261)
	at com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture.doFallback(AbstractCatchingFuture.java:206)
	at com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture.doFallback(AbstractCatchingFuture.java:193)
	at com.google.common.util.concurrent.AbstractCatchingFuture.run(AbstractCatchingFuture.java:135)
	at com.google.common.util.concurrent.DirectExecutor.execute(DirectExecutor.java:32)
	at com.google.common.util.concurrent.AbstractFuture.executeListener(AbstractFuture.java:1293)
	at com.google.common.util.concurrent.AbstractFuture.addListener(AbstractFuture.java:764)
	at com.google.common.util.concurrent.FluentFuture$TrustedFuture.addListener(FluentFuture.java:122)
	at com.google.common.util.concurrent.AbstractCatchingFuture.create(AbstractCatchingFuture.java:58)
	at com.google.common.util.concurrent.Futures.catchingAsync(Futures.java:411)
	at com.google.firebase.rules.runtime.impl.DefaultEvaluator.evaluate(DefaultEvaluator.java:177)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRuleClient$EmulatorRuleEvaluator.evaluate(EmulatorRuleClient.java:84)
	at com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer.lambda$fullEvaluate$9(AsyncTwoPhaseRulesAuthorizer.java:944)
	at com.google.cloud.datastore.computation.Computation.tryCatch(Computation.java:373)
	at com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer.fullEvaluate(AsyncTwoPhaseRulesAuthorizer.java:943)
	at com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer$CommitAuthorizerImpl.lambda$checkWrite$1(AsyncTwoPhaseRulesAuthorizer.java:1176)
	at com.google.cloud.datastore.computation.Computation.lambda$tryClose$26(Computation.java:642)
	at com.google.cloud.datastore.computation.Computation.tryCatch(Computation.java:373)
	at com.google.cloud.datastore.computation.Computation.tryFinally(Computation.java:609)
	at com.google.cloud.datastore.computation.Computation.tryFinally(Computation.java:615)
	at com.google.cloud.datastore.computation.Computation.tryClose(Computation.java:642)
	at com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer$CommitAuthorizerImpl.checkWrite(AsyncTwoPhaseRulesAuthorizer.java:1145)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.lambda$checkCommit$0(EmulatorRulesAuthorizer.java:140)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.withVerboseErrors(EmulatorRulesAuthorizer.java:293)
	... 21 more

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:26:21 PM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError\nWARNING: Operation failed: \nfalse for 'create' @ L57, evaluation error at L66:29 for 'create' @ L66, false for 'update' @ L57, evaluation error at L66:29 for 'update' @ L66, false for 'create' @ L57, Service call error. Function: [get], Argument: [path_value {\n  segments {\n    simple: \"databases\"\n  }\n  segments {\n    simple: \"(default)\"\n  }\n  segments {\n    simple: \"documents\"\n  }\n  segments {\n    simple: \"users\"\n  }\n  segments {\n    simple: \"at6tZLutK2AnQyq7oypawZulrzRw\"\n  }\n}\n]. for 'create' @ L66\ncom.google.cloud.datastore.core.exception.DatastoreException: \nfalse for 'create' @ L57, evaluation error at L66:29 for 'create' @ L66, false for 'update' @ L57, evaluation error at L66:29 for 'update' @ L66, false for 'create' @ L57, Service call error. Function: [get], Argument: [path_value {\n  segments {\n    simple: \"databases\"\n  }\n  segments {\n    simple: \"(default)\"\n  }\n  segments {\n    simple: \"documents\"\n  }\n  segments {\n    simple: \"users\"\n  }\n  segments {\n    simple: \"at6tZLutK2AnQyq7oypawZulrzRw\"\n  }\n}\n]. for 'create' @ L66\n\tat com.google.cloud.datastore.core.exception.DatastoreException$Builder.build(DatastoreException.java:120)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.verboseError(EmulatorRulesAuthorizer.java:321)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.withVerboseErrors(EmulatorRulesAuthorizer.java:298)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.checkCommit(EmulatorRulesAuthorizer.java:130)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.commitHelper(CloudFirestoreV1.java:1045)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:955)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:942)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.write(CloudFirestoreV1.java:930)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.handleRequest(CloudFirestoreV1WriteStream.java:210)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.write(CloudFirestoreV1WriteStream.java:138)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:93)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:26)\n\tat com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:160)\n\tat com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:130)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.onMessage(ChannelInternalImpl.java:525)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.deliverMessage(ForwardChannel.java:114)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.processPendingRequest(ForwardChannel.java:93)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.consume(ForwardChannel.java:67)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.add(ForwardChannel.java:60)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.handleRequestBody(ChannelInternalImpl.java:290)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.processSessionRequest(ChannelInternalImpl.java:357)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.handle(ChannelInternalImpl.java:172)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.consume(ChannelInternalImpl.java:91)\n\tat com.google.net.webchannel.server.common.ChannelProcessor.run(ChannelProcessor.java:86)\nCaused by: com.google.firebase.rules.runtime.common.EvaluationException: Error: security.rules line [37], column [14]. Service call error. Function: [get], Argument: [path_value {\n  segments {\n    simple: \"databases\"\n  }\n  segments {\n    simple: \"(default)\"\n  }\n  segments {\n    simple: \"documents\"\n  }\n  segments {\n    simple: \"users\"\n  }\n  segments {\n    simple: \"at6tZLutK2AnQyq7oypawZulrzRw\"\n  }\n}\n].\n\tat com.google.firebase.rules.runtime.impl.DefaultEvaluator$TransformEvaluationException.apply(DefaultEvaluator.java:275)\n\tat com.google.firebase.rules.runtime.impl.DefaultEvaluator$TransformEvaluationException.apply(DefaultEvaluator.java:261)\n\tat com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture.doFallback(AbstractCatchingFuture.java:206)\n\tat com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture.doFallback(AbstractCatchingFuture.java:193)\n\tat com.google.common.util.concurrent.AbstractCatchingFuture.run(AbstractCatchingFuture.java:135)\n\tat com.google.common.util.concurrent.DirectExecutor.execute(DirectExecutor.java:32)\n\tat com.google.common.util.concurrent.AbstractFuture.executeListener(AbstractFuture.java:1293)\n\tat com.google.common.util.concurrent.AbstractFuture.addListener(AbstractFuture.java:764)\n\tat com.google.common.util.concurrent.FluentFuture$TrustedFuture.addListener(FluentFuture.java:122)\n\tat com.google.common.util.concurrent.AbstractCatchingFuture.create(AbstractCatchingFuture.java:58)\n\tat com.google.common.util.concurrent.Futures.catchingAsync(Futures.java:411)\n\tat com.google.firebase.rules.runtime.impl.DefaultEvaluator.evaluate(DefaultEvaluator.java:177)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRuleClient$EmulatorRuleEvaluator.evaluate(EmulatorRuleClient.java:84)\n\tat com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer.lambda$fullEvaluate$9(AsyncTwoPhaseRulesAuthorizer.java:944)\n\tat com.google.cloud.datastore.computation.Computation.tryCatch(Computation.java:373)\n\tat com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer.fullEvaluate(AsyncTwoPhaseRulesAuthorizer.java:943)\n\tat com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer$CommitAuthorizerImpl.lambda$checkWrite$1(AsyncTwoPhaseRulesAuthorizer.java:1176)\n\tat com.google.cloud.datastore.computation.Computation.lambda$tryClose$26(Computation.java:642)\n\tat com.google.cloud.datastore.computation.Computation.tryCatch(Computation.java:373)\n\tat com.google.cloud.datastore.computation.Computation.tryFinally(Computation.java:609)\n\tat com.google.cloud.datastore.computation.Computation.tryFinally(Computation.java:615)\n\tat com.google.cloud.datastore.computation.Computation.tryClose(Computation.java:642)\n\tat com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer$CommitAuthorizerImpl.checkWrite(AsyncTwoPhaseRulesAuthorizer.java:1145)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.lambda$checkCommit$0(EmulatorRulesAuthorizer.java:140)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.withVerboseErrors(EmulatorRulesAuthorizer.java:293)\n\t... 21 more\n\n"}}
[debug] [2024-01-04T23:26:21.068Z] Jan 04, 2024 11:26:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:26:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:26:21.074Z] Jan 04, 2024 11:26:21 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler onClose
INFO: channel closed
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:26:21 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler onClose\nINFO: channel closed\n"}}
[debug] [2024-01-04T23:26:56.766Z] Jan 04, 2024 11:26:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:26:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:26:58.491Z] Jan 04, 2024 11:26:58 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:26:58 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2024-01-04T23:26:58.496Z] Jan 04, 2024 11:26:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:26:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:26:58.519Z] Jan 04, 2024 11:26:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:26:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:26:58.526Z] Jan 04, 2024 11:26:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:26:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:26:58.585Z] Jan 04, 2024 11:26:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:26:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:27:01.285Z] Jan 04, 2024 11:27:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:27:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:27:01.294Z] Jan 04, 2024 11:27:01 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreListenHandler onClose
INFO: channel closed
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:27:01 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreListenHandler onClose\nINFO: channel closed\n"}}
[debug] [2024-01-04T23:27:05.310Z] >>> [apiv2][query] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast [none]
[debug] [2024-01-04T23:27:05.310Z] >>> [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"eventId":"5737537c-38d5-4c30-9c30-08cce2f48403","eventType":"providers/firebase.auth/eventTypes/user.delete","resource":{"name":"projects/ptate-df901","service":"firebaseauth.googleapis.com"},"params":{},"timestamp":"2024-01-04T23:27:05.310Z","data":{"uid":"at6tZLutK2AnQyq7oypawZulrzRw","email":"lucymaber0@gmail.com","emailVerified":false,"metadata":{"creationTime":"2024-01-04T23:26:20.868Z","lastSignInTime":"2024-01-04T23:26:20.926Z"},"customClaims":{},"providerData":[{"providerId":"password","email":"lucymaber0@gmail.com","federatedId":"lucymaber0@gmail.com","rawId":"lucymaber0@gmail.com"}]}}
[debug] [2024-01-04T23:27:05.314Z] <<< [apiv2][status] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast 200
[debug] [2024-01-04T23:27:05.315Z] <<< [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"status":"multicast_acknowledged"}
[debug] [2024-01-04T23:27:08.785Z] >>> [apiv2][query] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast [none]
[debug] [2024-01-04T23:27:08.786Z] >>> [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"eventId":"6b6abb25-7cc1-45f8-89a2-600ac6bf79be","eventType":"providers/firebase.auth/eventTypes/user.delete","resource":{"name":"projects/ptate-df901","service":"firebaseauth.googleapis.com"},"params":{},"timestamp":"2024-01-04T23:27:08.784Z","data":{"uid":"awLHWJ3kpusfER1rvL2PZeG0U2fY","email":"lucymaber2@gmail.com","emailVerified":false,"metadata":{"creationTime":"2024-01-04T23:24:57.286Z","lastSignInTime":"2024-01-04T23:24:57.330Z"},"customClaims":{},"providerData":[{"providerId":"password","email":"lucymaber2@gmail.com","federatedId":"lucymaber2@gmail.com","rawId":"lucymaber2@gmail.com"}]}}
[debug] [2024-01-04T23:27:08.793Z] <<< [apiv2][status] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast 200
[debug] [2024-01-04T23:27:08.794Z] <<< [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"status":"multicast_acknowledged"}
[debug] [2024-01-04T23:27:12.833Z] >>> [apiv2][query] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast [none]
[debug] [2024-01-04T23:27:12.835Z] >>> [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"eventId":"4dd70cad-ebf4-4f32-b051-4da5364cc851","eventType":"providers/firebase.auth/eventTypes/user.create","resource":{"name":"projects/ptate-df901","service":"firebaseauth.googleapis.com"},"params":{},"timestamp":"2024-01-04T23:27:12.833Z","data":{"uid":"h0HOt2jKm266ozVKsgWkMDr68u3S","email":"lucymaber0@gmail.com","emailVerified":false,"metadata":{"creationTime":"2024-01-04T23:27:12.832Z","lastSignInTime":"2024-01-04T23:27:12.832Z"},"customClaims":{},"providerData":[{"providerId":"password","email":"lucymaber0@gmail.com","federatedId":"lucymaber0@gmail.com","rawId":"lucymaber0@gmail.com"}]}}
[debug] [2024-01-04T23:27:12.847Z] <<< [apiv2][status] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast 200
[debug] [2024-01-04T23:27:12.848Z] <<< [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"status":"multicast_acknowledged"}
[debug] [2024-01-04T23:27:12.925Z] Jan 04, 2024 11:27:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:27:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:27:12.936Z] Jan 04, 2024 11:27:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:27:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:27:12.973Z] Jan 04, 2024 11:27:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:27:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:27:12.983Z] Jan 04, 2024 11:27:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:27:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:27:12.994Z] Jan 04, 2024 11:27:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:27:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:27:13.024Z] Jan 04, 2024 11:27:13 PM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError
WARNING: Operation failed: 
false for 'create' @ L57, evaluation error at L66:29 for 'create' @ L66, false for 'update' @ L57, evaluation error at L66:29 for 'update' @ L66, false for 'create' @ L57, Service call error. Function: [get], Argument: [path_value {
  segments {
    simple: "databases"
  }
  segments {
    simple: "(default)"
  }
  segments {
    simple: "documents"
  }
  segments {
    simple: "users"
  }
  segments {
    simple: "h0HOt2jKm266ozVKsgWkMDr68u3S"
  }
}
]. for 'create' @ L66
com.google.cloud.datastore.core.exception.DatastoreException: 
false for 'create' @ L57, evaluation error at L66:29 for 'create' @ L66, false for 'update' @ L57, evaluation error at L66:29 for 'update' @ L66, false for 'create' @ L57, Service call error. Function: [get], Argument: [path_value {
  segments {
    simple: "databases"
  }
  segments {
    simple: "(default)"
  }
  segments {
    simple: "documents"
  }
  segments {
    simple: "users"
  }
  segments {
    simple: "h0HOt2jKm266ozVKsgWkMDr68u3S"
  }
}
]. for 'create' @ L66
	at com.google.cloud.datastore.core.exception.DatastoreException$Builder.build(DatastoreException.java:120)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.verboseError(EmulatorRulesAuthorizer.java:321)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.withVerboseErrors(EmulatorRulesAuthorizer.java:298)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.checkCommit(EmulatorRulesAuthorizer.java:130)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.commitHelper(CloudFirestoreV1.java:1045)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:955)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:942)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.write(CloudFirestoreV1.java:930)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.handleRequest(CloudFirestoreV1WriteStream.java:210)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.write(CloudFirestoreV1WriteStream.java:138)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:93)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:26)
	at com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:160)
	at com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:130)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.onMessage(ChannelInternalImpl.java:525)
	at com.google.net.webchannel.server.v8.ForwardChannel.deliverMessage(ForwardChannel.java:114)
	at com.google.net.webchannel.server.v8.ForwardChannel.processPendingRequest(ForwardChannel.java:93)
	at com.google.net.webchannel.server.v8.ForwardChannel.consume(ForwardChannel.java:67)
	at com.google.net.webchannel.server.v8.ForwardChannel.add(ForwardChannel.java:60)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.handleRequestBody(ChannelInternalImpl.java:290)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.processSessionRequest(ChannelInternalImpl.java:357)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.handle(ChannelInternalImpl.java:172)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.consume(ChannelInternalImpl.java:91)
	at com.google.net.webchannel.server.common.ChannelProcessor.run(ChannelProcessor.java:86)
Caused by: com.google.firebase.rules.runtime.common.EvaluationException: Error: security.rules line [37], column [14]. Service call error. Function: [get], Argument: [path_value {
  segments {
    simple: "databases"
  }
  segments {
    simple: "(default)"
  }
  segments {
    simple: "documents"
  }
  segments {
    simple: "users"
  }
  segments {
    simple: "h0HOt2jKm266ozVKsgWkMDr68u3S"
  }
}
].
	at com.google.firebase.rules.runtime.impl.DefaultEvaluator$TransformEvaluationException.apply(DefaultEvaluator.java:275)
	at com.google.firebase.rules.runtime.impl.DefaultEvaluator$TransformEvaluationException.apply(DefaultEvaluator.java:261)
	at com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture.doFallback(AbstractCatchingFuture.java:206)
	at com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture.doFallback(AbstractCatchingFuture.java:193)
	at com.google.common.util.concurrent.AbstractCatchingFuture.run(AbstractCatchingFuture.java:135)
	at com.google.common.util.concurrent.DirectExecutor.execute(DirectExecutor.java:32)
	at com.google.common.util.concurrent.AbstractFuture.executeListener(AbstractFuture.java:1293)
	at com.google.common.util.concurrent.AbstractFuture.addListener(AbstractFuture.java:764)
	at com.google.common.util.concurrent.FluentFuture$TrustedFuture.addListener(FluentFuture.java:122)
	at com.google.common.util.concurrent.AbstractCatchingFuture.create(AbstractCatchingFuture.java:58)
	at com.google.common.util.concurrent.Futures.catchingAsync(Futures.java:411)
	at com.google.firebase.rules.runtime.impl.DefaultEvaluator.evaluate(DefaultEvaluator.java:177)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRuleClient$EmulatorRuleEvaluator.evaluate(EmulatorRuleClient.java:84)
	at com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer.lambda$fullEvaluate$9(AsyncTwoPhaseRulesAuthorizer.java:944)
	at com.google.cloud.datastore.computation.Computation.tryCatch(Computation.java:373)
	at com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer.fullEvaluate(AsyncTwoPhaseRulesAuthorizer.java:943)
	at com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer$CommitAuthorizerImpl.lambda$checkWrite$1(AsyncTwoPhaseRulesAuthorizer.java:1176)
	at com.google.cloud.datastore.computation.Computation.lambda$tryClose$26(Computation.java:642)
	at com.google.cloud.datastore.computation.Computation.tryCatch(Computation.java:373)
	at com.google.cloud.datastore.computation.Computation.tryFinally(Computation.java:609)
	at com.google.cloud.datastore.computation.Computation.tryFinally(Computation.java:615)
	at com.google.cloud.datastore.computation.Computation.tryClose(Computation.java:642)
	at com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer$CommitAuthorizerImpl.checkWrite(AsyncTwoPhaseRulesAuthorizer.java:1145)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.lambda$checkCommit$0(EmulatorRulesAuthorizer.java:140)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.withVerboseErrors(EmulatorRulesAuthorizer.java:293)
	... 21 more

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:27:13 PM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError\nWARNING: Operation failed: \nfalse for 'create' @ L57, evaluation error at L66:29 for 'create' @ L66, false for 'update' @ L57, evaluation error at L66:29 for 'update' @ L66, false for 'create' @ L57, Service call error. Function: [get], Argument: [path_value {\n  segments {\n    simple: \"databases\"\n  }\n  segments {\n    simple: \"(default)\"\n  }\n  segments {\n    simple: \"documents\"\n  }\n  segments {\n    simple: \"users\"\n  }\n  segments {\n    simple: \"h0HOt2jKm266ozVKsgWkMDr68u3S\"\n  }\n}\n]. for 'create' @ L66\ncom.google.cloud.datastore.core.exception.DatastoreException: \nfalse for 'create' @ L57, evaluation error at L66:29 for 'create' @ L66, false for 'update' @ L57, evaluation error at L66:29 for 'update' @ L66, false for 'create' @ L57, Service call error. Function: [get], Argument: [path_value {\n  segments {\n    simple: \"databases\"\n  }\n  segments {\n    simple: \"(default)\"\n  }\n  segments {\n    simple: \"documents\"\n  }\n  segments {\n    simple: \"users\"\n  }\n  segments {\n    simple: \"h0HOt2jKm266ozVKsgWkMDr68u3S\"\n  }\n}\n]. for 'create' @ L66\n\tat com.google.cloud.datastore.core.exception.DatastoreException$Builder.build(DatastoreException.java:120)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.verboseError(EmulatorRulesAuthorizer.java:321)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.withVerboseErrors(EmulatorRulesAuthorizer.java:298)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.checkCommit(EmulatorRulesAuthorizer.java:130)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.commitHelper(CloudFirestoreV1.java:1045)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:955)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:942)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.write(CloudFirestoreV1.java:930)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.handleRequest(CloudFirestoreV1WriteStream.java:210)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.write(CloudFirestoreV1WriteStream.java:138)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:93)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:26)\n\tat com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:160)\n\tat com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:130)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.onMessage(ChannelInternalImpl.java:525)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.deliverMessage(ForwardChannel.java:114)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.processPendingRequest(ForwardChannel.java:93)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.consume(ForwardChannel.java:67)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.add(ForwardChannel.java:60)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.handleRequestBody(ChannelInternalImpl.java:290)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.processSessionRequest(ChannelInternalImpl.java:357)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.handle(ChannelInternalImpl.java:172)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.consume(ChannelInternalImpl.java:91)\n\tat com.google.net.webchannel.server.common.ChannelProcessor.run(ChannelProcessor.java:86)\nCaused by: com.google.firebase.rules.runtime.common.EvaluationException: Error: security.rules line [37], column [14]. Service call error. Function: [get], Argument: [path_value {\n  segments {\n    simple: \"databases\"\n  }\n  segments {\n    simple: \"(default)\"\n  }\n  segments {\n    simple: \"documents\"\n  }\n  segments {\n    simple: \"users\"\n  }\n  segments {\n    simple: \"h0HOt2jKm266ozVKsgWkMDr68u3S\"\n  }\n}\n].\n\tat com.google.firebase.rules.runtime.impl.DefaultEvaluator$TransformEvaluationException.apply(DefaultEvaluator.java:275)\n\tat com.google.firebase.rules.runtime.impl.DefaultEvaluator$TransformEvaluationException.apply(DefaultEvaluator.java:261)\n\tat com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture.doFallback(AbstractCatchingFuture.java:206)\n\tat com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture.doFallback(AbstractCatchingFuture.java:193)\n\tat com.google.common.util.concurrent.AbstractCatchingFuture.run(AbstractCatchingFuture.java:135)\n\tat com.google.common.util.concurrent.DirectExecutor.execute(DirectExecutor.java:32)\n\tat com.google.common.util.concurrent.AbstractFuture.executeListener(AbstractFuture.java:1293)\n\tat com.google.common.util.concurrent.AbstractFuture.addListener(AbstractFuture.java:764)\n\tat com.google.common.util.concurrent.FluentFuture$TrustedFuture.addListener(FluentFuture.java:122)\n\tat com.google.common.util.concurrent.AbstractCatchingFuture.create(AbstractCatchingFuture.java:58)\n\tat com.google.common.util.concurrent.Futures.catchingAsync(Futures.java:411)\n\tat com.google.firebase.rules.runtime.impl.DefaultEvaluator.evaluate(DefaultEvaluator.java:177)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRuleClient$EmulatorRuleEvaluator.evaluate(EmulatorRuleClient.java:84)\n\tat com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer.lambda$fullEvaluate$9(AsyncTwoPhaseRulesAuthorizer.java:944)\n\tat com.google.cloud.datastore.computation.Computation.tryCatch(Computation.java:373)\n\tat com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer.fullEvaluate(AsyncTwoPhaseRulesAuthorizer.java:943)\n\tat com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer$CommitAuthorizerImpl.lambda$checkWrite$1(AsyncTwoPhaseRulesAuthorizer.java:1176)\n\tat com.google.cloud.datastore.computation.Computation.lambda$tryClose$26(Computation.java:642)\n\tat com.google.cloud.datastore.computation.Computation.tryCatch(Computation.java:373)\n\tat com.google.cloud.datastore.computation.Computation.tryFinally(Computation.java:609)\n\tat com.google.cloud.datastore.computation.Computation.tryFinally(Computation.java:615)\n\tat com.google.cloud.datastore.computation.Computation.tryClose(Computation.java:642)\n\tat com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer$CommitAuthorizerImpl.checkWrite(AsyncTwoPhaseRulesAuthorizer.java:1145)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.lambda$checkCommit$0(EmulatorRulesAuthorizer.java:140)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.withVerboseErrors(EmulatorRulesAuthorizer.java:293)\n\t... 21 more\n\n"}}
[debug] [2024-01-04T23:27:13.040Z] Jan 04, 2024 11:27:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:27:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:27:13.042Z] Jan 04, 2024 11:27:13 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler onClose
INFO: channel closed
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:27:13 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler onClose\nINFO: channel closed\n"}}
[debug] [2024-01-04T23:27:43.336Z] Jan 04, 2024 11:27:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:27:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:28:29.368Z] Jan 04, 2024 11:28:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:28:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:29:15.389Z] Jan 04, 2024 11:29:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:29:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:30:01.407Z] Jan 04, 2024 11:30:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:30:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:31:17.436Z] Jan 04, 2024 11:31:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:31:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:32:03.466Z] Jan 04, 2024 11:32:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:32:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:33:19.497Z] Jan 04, 2024 11:33:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:33:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:34:35.548Z] Jan 04, 2024 11:34:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:34:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:35:51.565Z] Jan 04, 2024 11:35:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:35:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:36:37.578Z] Jan 04, 2024 11:36:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:36:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:37:23.597Z] Jan 04, 2024 11:37:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:37:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:38:09.621Z] Jan 04, 2024 11:38:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:38:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:38:55.645Z] Jan 04, 2024 11:38:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:38:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:39:41.674Z] Jan 04, 2024 11:39:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:39:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:40:41.692Z] Jan 04, 2024 11:40:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:40:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:41:57.715Z] Jan 04, 2024 11:41:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:41:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:43:13.752Z] Jan 04, 2024 11:43:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:43:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:43:59.769Z] Jan 04, 2024 11:43:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:43:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:44:59.789Z] Jan 04, 2024 11:44:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:44:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:45:25.568Z] >>> [apiv2][query] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast [none]
[debug] [2024-01-04T23:45:25.569Z] >>> [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"eventId":"1d6a28a9-4289-4282-89ae-e15cc5fa8303","eventType":"providers/firebase.auth/eventTypes/user.delete","resource":{"name":"projects/ptate-df901","service":"firebaseauth.googleapis.com"},"params":{},"timestamp":"2024-01-04T23:45:25.568Z","data":{"uid":"h0HOt2jKm266ozVKsgWkMDr68u3S","email":"lucymaber0@gmail.com","emailVerified":false,"metadata":{"creationTime":"2024-01-04T23:27:12.832Z","lastSignInTime":"2024-01-04T23:27:12.906Z"},"customClaims":{},"providerData":[{"providerId":"password","email":"lucymaber0@gmail.com","federatedId":"lucymaber0@gmail.com","rawId":"lucymaber0@gmail.com"}]}}
[debug] [2024-01-04T23:45:25.577Z] <<< [apiv2][status] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast 200
[debug] [2024-01-04T23:45:25.577Z] <<< [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"status":"multicast_acknowledged"}
[debug] [2024-01-04T23:45:27.355Z] >>> [apiv2][query] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast [none]
[debug] [2024-01-04T23:45:27.355Z] >>> [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"eventId":"34e80cd8-138f-497f-b99d-d8dd5128f81a","eventType":"providers/firebase.auth/eventTypes/user.create","resource":{"name":"projects/ptate-df901","service":"firebaseauth.googleapis.com"},"params":{},"timestamp":"2024-01-04T23:45:27.355Z","data":{"uid":"dTff6Ij7bNtwJ4aJxy6aWc8WJYiy","email":"lucymaber0@gmail.com","emailVerified":false,"metadata":{"creationTime":"2024-01-04T23:45:27.354Z","lastSignInTime":"2024-01-04T23:45:27.354Z"},"customClaims":{},"providerData":[{"providerId":"password","email":"lucymaber0@gmail.com","federatedId":"lucymaber0@gmail.com","rawId":"lucymaber0@gmail.com"}]}}
[debug] [2024-01-04T23:45:27.368Z] <<< [apiv2][status] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast 200
[debug] [2024-01-04T23:45:27.377Z] <<< [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"status":"multicast_acknowledged"}
[debug] [2024-01-04T23:45:27.454Z] Jan 04, 2024 11:45:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:45:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:45:27.473Z] Jan 04, 2024 11:45:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:45:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:45:27.486Z] Jan 04, 2024 11:45:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:45:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:45:27.528Z] Jan 04, 2024 11:45:27 PM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError
WARNING: Operation failed: 
false for 'create' @ L57, evaluation error at L66:29 for 'create' @ L66, false for 'update' @ L57, evaluation error at L66:29 for 'update' @ L66, false for 'create' @ L57, Service call error. Function: [get], Argument: [path_value {
  segments {
    simple: "databases"
  }
  segments {
    simple: "(default)"
  }
  segments {
    simple: "documents"
  }
  segments {
    simple: "users"
  }
  segments {
    simple: "dTff6Ij7bNtwJ4aJxy6aWc8WJYiy"
  }
}
]. for 'create' @ L66
com.google.cloud.datastore.core.exception.DatastoreException: 
false for 'create' @ L57, evaluation error at L66:29 for 'create' @ L66, false for 'update' @ L57, evaluation error at L66:29 for 'update' @ L66, false for 'create' @ L57, Service call error. Function: [get], Argument: [path_value {
  segments {
    simple: "databases"
  }
  segments {
    simple: "(default)"
  }
  segments {
    simple: "documents"
  }
  segments {
    simple: "users"
  }
  segments {
    simple: "dTff6Ij7bNtwJ4aJxy6aWc8WJYiy"
  }
}
]. for 'create' @ L66
	at com.google.cloud.datastore.core.exception.DatastoreException$Builder.build(DatastoreException.java:120)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.verboseError(EmulatorRulesAuthorizer.java:321)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.withVerboseErrors(EmulatorRulesAuthorizer.java:298)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.checkCommit(EmulatorRulesAuthorizer.java:130)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.commitHelper(CloudFirestoreV1.java:1045)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:955)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:942)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.write(CloudFirestoreV1.java:930)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.handleRequest(CloudFirestoreV1WriteStream.java:210)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.write(CloudFirestoreV1WriteStream.java:138)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:93)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:26)
	at com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:160)
	at com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:130)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.onMessage(ChannelInternalImpl.java:525)
	at com.google.net.webchannel.server.v8.ForwardChannel.deliverMessage(ForwardChannel.java:114)
	at com.google.net.webchannel.server.v8.ForwardChannel.processPendingRequest(ForwardChannel.java:93)
	at com.google.net.webchannel.server.v8.ForwardChannel.consume(ForwardChannel.java:67)
	at com.google.net.webchannel.server.v8.ForwardChannel.add(ForwardChannel.java:60)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.handleRequestBody(ChannelInternalImpl.java:290)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.processSessionRequest(ChannelInternalImpl.java:357)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.handle(ChannelInternalImpl.java:172)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.consume(ChannelInternalImpl.java:91)
	at com.google.net.webchannel.server.common.ChannelProcessor.run(ChannelProcessor.java:86)
Caused by: com.google.firebase.rules.runtime.common.EvaluationException: Error: security.rules line [37], column [14]. Service call error. Function: [get], Argument: [path_value {
  segments {
    simple: "databases"
  }
  segments {
    simple: "(default)"
  }
  segments {
    simple: "documents"
  }
  segments {
    simple: "users"
  }
  segments {
    simple: "dTff6Ij7bNtwJ4aJxy6aWc8WJYiy"
  }
}
].
	at com.google.firebase.rules.runtime.impl.DefaultEvaluator$TransformEvaluationException.apply(DefaultEvaluator.java:275)
	at com.google.firebase.rules.runtime.impl.DefaultEvaluator$TransformEvaluationException.apply(DefaultEvaluator.java:261)
	at com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture.doFallback(AbstractCatchingFuture.java:206)
	at com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture.doFallback(AbstractCatchingFuture.java:193)
	at com.google.common.util.concurrent.AbstractCatchingFuture.run(AbstractCatchingFuture.java:135)
	at com.google.common.util.concurrent.DirectExecutor.execute(DirectExecutor.java:32)
	at com.google.common.util.concurrent.AbstractFuture.executeListener(AbstractFuture.java:1293)
	at com.google.common.util.concurrent.AbstractFuture.addListener(AbstractFuture.java:764)
	at com.google.common.util.concurrent.FluentFuture$TrustedFuture.addListener(FluentFuture.java:122)
	at com.google.common.util.concurrent.AbstractCatchingFuture.create(AbstractCatchingFuture.java:58)
	at com.google.common.util.concurrent.Futures.catchingAsync(Futures.java:411)
	at com.google.firebase.rules.runtime.impl.DefaultEvaluator.evaluate(DefaultEvaluator.java:177)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRuleClient$EmulatorRuleEvaluator.evaluate(EmulatorRuleClient.java:84)
	at com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer.lambda$fullEvaluate$9(AsyncTwoPhaseRulesAuthorizer.java:944)
	at com.google.cloud.datastore.computation.Computation.tryCatch(Computation.java:373)
	at com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer.fullEvaluate(AsyncTwoPhaseRulesAuthorizer.java:943)
	at com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer$CommitAuthorizerImpl.lambda$checkWrite$1(AsyncTwoPhaseRulesAuthorizer.java:1176)
	at com.google.cloud.datastore.computation.Computation.lambda$tryClose$26(Computation.java:642)
	at com.google.cloud.datastore.computation.Computation.tryCatch(Computation.java:373)
	at com.google.cloud.datastore.computation.Computation.tryFinally(Computation.java:609)
	at com.google.cloud.datastore.computation.Computation.tryFinally(Computation.java:615)
	at com.google.cloud.datastore.computation.Computation.tryClose(Computation.java:642)
	at com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer$CommitAuthorizerImpl.checkWrite(AsyncTwoPhaseRulesAuthorizer.java:1145)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.lambda$checkCommit$0(EmulatorRulesAuthorizer.java:140)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.withVerboseErrors(EmulatorRulesAuthorizer.java:293)
	... 21 more

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:45:27 PM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError\nWARNING: Operation failed: \nfalse for 'create' @ L57, evaluation error at L66:29 for 'create' @ L66, false for 'update' @ L57, evaluation error at L66:29 for 'update' @ L66, false for 'create' @ L57, Service call error. Function: [get], Argument: [path_value {\n  segments {\n    simple: \"databases\"\n  }\n  segments {\n    simple: \"(default)\"\n  }\n  segments {\n    simple: \"documents\"\n  }\n  segments {\n    simple: \"users\"\n  }\n  segments {\n    simple: \"dTff6Ij7bNtwJ4aJxy6aWc8WJYiy\"\n  }\n}\n]. for 'create' @ L66\ncom.google.cloud.datastore.core.exception.DatastoreException: \nfalse for 'create' @ L57, evaluation error at L66:29 for 'create' @ L66, false for 'update' @ L57, evaluation error at L66:29 for 'update' @ L66, false for 'create' @ L57, Service call error. Function: [get], Argument: [path_value {\n  segments {\n    simple: \"databases\"\n  }\n  segments {\n    simple: \"(default)\"\n  }\n  segments {\n    simple: \"documents\"\n  }\n  segments {\n    simple: \"users\"\n  }\n  segments {\n    simple: \"dTff6Ij7bNtwJ4aJxy6aWc8WJYiy\"\n  }\n}\n]. for 'create' @ L66\n\tat com.google.cloud.datastore.core.exception.DatastoreException$Builder.build(DatastoreException.java:120)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.verboseError(EmulatorRulesAuthorizer.java:321)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.withVerboseErrors(EmulatorRulesAuthorizer.java:298)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.checkCommit(EmulatorRulesAuthorizer.java:130)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.commitHelper(CloudFirestoreV1.java:1045)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:955)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:942)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.write(CloudFirestoreV1.java:930)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.handleRequest(CloudFirestoreV1WriteStream.java:210)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.write(CloudFirestoreV1WriteStream.java:138)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:93)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:26)\n\tat com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:160)\n\tat com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:130)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.onMessage(ChannelInternalImpl.java:525)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.deliverMessage(ForwardChannel.java:114)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.processPendingRequest(ForwardChannel.java:93)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.consume(ForwardChannel.java:67)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.add(ForwardChannel.java:60)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.handleRequestBody(ChannelInternalImpl.java:290)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.processSessionRequest(ChannelInternalImpl.java:357)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.handle(ChannelInternalImpl.java:172)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.consume(ChannelInternalImpl.java:91)\n\tat com.google.net.webchannel.server.common.ChannelProcessor.run(ChannelProcessor.java:86)\nCaused by: com.google.firebase.rules.runtime.common.EvaluationException: Error: security.rules line [37], column [14]. Service call error. Function: [get], Argument: [path_value {\n  segments {\n    simple: \"databases\"\n  }\n  segments {\n    simple: \"(default)\"\n  }\n  segments {\n    simple: \"documents\"\n  }\n  segments {\n    simple: \"users\"\n  }\n  segments {\n    simple: \"dTff6Ij7bNtwJ4aJxy6aWc8WJYiy\"\n  }\n}\n].\n\tat com.google.firebase.rules.runtime.impl.DefaultEvaluator$TransformEvaluationException.apply(DefaultEvaluator.java:275)\n\tat com.google.firebase.rules.runtime.impl.DefaultEvaluator$TransformEvaluationException.apply(DefaultEvaluator.java:261)\n\tat com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture.doFallback(AbstractCatchingFuture.java:206)\n\tat com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture.doFallback(AbstractCatchingFuture.java:193)\n\tat com.google.common.util.concurrent.AbstractCatchingFuture.run(AbstractCatchingFuture.java:135)\n\tat com.google.common.util.concurrent.DirectExecutor.execute(DirectExecutor.java:32)\n\tat com.google.common.util.concurrent.AbstractFuture.executeListener(AbstractFuture.java:1293)\n\tat com.google.common.util.concurrent.AbstractFuture.addListener(AbstractFuture.java:764)\n\tat com.google.common.util.concurrent.FluentFuture$TrustedFuture.addListener(FluentFuture.java:122)\n\tat com.google.common.util.concurrent.AbstractCatchingFuture.create(AbstractCatchingFuture.java:58)\n\tat com.google.common.util.concurrent.Futures.catchingAsync(Futures.java:411)\n\tat com.google.firebase.rules.runtime.impl.DefaultEvaluator.evaluate(DefaultEvaluator.java:177)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRuleClient$EmulatorRuleEvaluator.evaluate(EmulatorRuleClient.java:84)\n\tat com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer.lambda$fullEvaluate$9(AsyncTwoPhaseRulesAuthorizer.java:944)\n\tat com.google.cloud.datastore.computation.Computation.tryCatch(Computation.java:373)\n\tat com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer.fullEvaluate(AsyncTwoPhaseRulesAuthorizer.java:943)\n\tat com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer$CommitAuthorizerImpl.lambda$checkWrite$1(AsyncTwoPhaseRulesAuthorizer.java:1176)\n\tat com.google.cloud.datastore.computation.Computation.lambda$tryClose$26(Computation.java:642)\n\tat com.google.cloud.datastore.computation.Computation.tryCatch(Computation.java:373)\n\tat com.google.cloud.datastore.computation.Computation.tryFinally(Computation.java:609)\n\tat com.google.cloud.datastore.computation.Computation.tryFinally(Computation.java:615)\n\tat com.google.cloud.datastore.computation.Computation.tryClose(Computation.java:642)\n\tat com.google.cloud.datastore.core.auth.rules.AsyncTwoPhaseRulesAuthorizer$CommitAuthorizerImpl.checkWrite(AsyncTwoPhaseRulesAuthorizer.java:1145)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.lambda$checkCommit$0(EmulatorRulesAuthorizer.java:140)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.withVerboseErrors(EmulatorRulesAuthorizer.java:293)\n\t... 21 more\n\n"}}
[debug] [2024-01-04T23:45:27.582Z] Jan 04, 2024 11:45:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:45:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:45:27.584Z] Jan 04, 2024 11:45:27 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler onClose
INFO: channel closed
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:45:27 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler onClose\nINFO: channel closed\n"}}
[debug] [2024-01-04T23:45:45.807Z] Jan 04, 2024 11:45:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:45:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:45:51.656Z] Jan 04, 2024 11:45:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:45:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:46:45.821Z] Jan 04, 2024 11:46:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:46:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:47:31.848Z] Jan 04, 2024 11:47:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:47:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:48:17.877Z] Jan 04, 2024 11:48:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:48:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T23:49:15.616Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T23:49:15.616Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      // allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      // allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      // isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n        return candidateIds is list &&\n        candidateIds.size() > 0;\n        \n      }\n    }\n  }\n}\n"}]}}
[debug] [2024-01-04T23:49:15.618Z] Jan 04, 2024 11:49:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:49:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:49:15.709Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T23:49:15.709Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":12,"column":14,"currentOffset":457,"endOffset":468},"description":"Unused function: isValidEmail.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":36,"column":14,"currentOffset":1479,"endOffset":1489},"description":"Unused function: isUserAdmin.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":37,"column":14,"currentOffset":1511,"endOffset":1513},"description":"Invalid function name: get.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":44,"column":14,"currentOffset":1852,"endOffset":1867},"description":"Unused function: isValidFirstName.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":50,"column":14,"currentOffset":2111,"endOffset":2125},"description":"Unused function: isValidLastName.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":53,"column":59,"currentOffset":2321,"endOffset":2329},"description":"Invalid variable name: firstName.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":77,"column":16,"currentOffset":3666,"endOffset":3684},"description":"Unused function: isValidElectionData.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":92,"column":60,"currentOffset":4353,"endOffset":4355},"description":"Invalid function name: now.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":98,"column":56,"currentOffset":4602,"endOffset":4604},"description":"Invalid function name: now.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":116,"column":16,"currentOffset":5309,"endOffset":5328},"description":"Unused function: isValidCandidateData.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":132,"column":16,"currentOffset":5929,"endOffset":5943},"description":"Unused function: isValidVoteData.","severity":"WARNING"}]}
[warn] ⚠  firestore.rules:12:14 - WARNING Unused function: isValidEmail. 
[warn] ⚠  firestore.rules:36:14 - WARNING Unused function: isUserAdmin. 
[warn] ⚠  firestore.rules:37:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:44:14 - WARNING Unused function: isValidFirstName. 
[warn] ⚠  firestore.rules:50:14 - WARNING Unused function: isValidLastName. 
[warn] ⚠  firestore.rules:53:59 - WARNING Invalid variable name: firstName. 
[warn] ⚠  firestore.rules:77:16 - WARNING Unused function: isValidElectionData. 
[warn] ⚠  firestore.rules:92:60 - WARNING Invalid function name: now. 
[warn] ⚠  firestore.rules:98:56 - WARNING Invalid function name: now. 
[warn] ⚠  firestore.rules:116:16 - WARNING Unused function: isValidCandidateData. 
[warn] ⚠  firestore.rules:132:16 - WARNING Unused function: isValidVoteData. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T23:49:15.765Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T23:49:15.765Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string && isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      // allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      // allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      // isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n        return candidateIds is list &&\n        candidateIds.size() > 0;\n        \n      }\n    }\n  }\n}\n"}]}}
[debug] [2024-01-04T23:49:15.770Z] Jan 04, 2024 11:49:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:49:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:49:15.873Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T23:49:15.874Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":12,"column":14,"currentOffset":457,"endOffset":468},"description":"Unused function: isValidEmail.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":36,"column":14,"currentOffset":1479,"endOffset":1489},"description":"Unused function: isUserAdmin.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":37,"column":14,"currentOffset":1511,"endOffset":1513},"description":"Invalid function name: get.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":44,"column":14,"currentOffset":1852,"endOffset":1867},"description":"Unused function: isValidFirstName.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":50,"column":14,"currentOffset":2111,"endOffset":2125},"description":"Unused function: isValidLastName.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":53,"column":59,"currentOffset":2321,"endOffset":2329},"description":"Invalid variable name: firstName.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":77,"column":16,"currentOffset":3666,"endOffset":3684},"description":"Unused function: isValidElectionData.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":92,"column":60,"currentOffset":4353,"endOffset":4355},"description":"Invalid function name: now.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":98,"column":56,"currentOffset":4602,"endOffset":4604},"description":"Invalid function name: now.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":116,"column":16,"currentOffset":5309,"endOffset":5328},"description":"Unused function: isValidCandidateData.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":132,"column":16,"currentOffset":5929,"endOffset":5943},"description":"Unused function: isValidVoteData.","severity":"WARNING"}]}
[warn] ⚠  firestore.rules:12:14 - WARNING Unused function: isValidEmail. 
[warn] ⚠  firestore.rules:36:14 - WARNING Unused function: isUserAdmin. 
[warn] ⚠  firestore.rules:37:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:44:14 - WARNING Unused function: isValidFirstName. 
[warn] ⚠  firestore.rules:50:14 - WARNING Unused function: isValidLastName. 
[warn] ⚠  firestore.rules:53:59 - WARNING Invalid variable name: firstName. 
[warn] ⚠  firestore.rules:77:16 - WARNING Unused function: isValidElectionData. 
[warn] ⚠  firestore.rules:92:60 - WARNING Invalid function name: now. 
[warn] ⚠  firestore.rules:98:56 - WARNING Invalid function name: now. 
[warn] ⚠  firestore.rules:116:16 - WARNING Unused function: isValidCandidateData. 
[warn] ⚠  firestore.rules:132:16 - WARNING Unused function: isValidVoteData. 
[info] ✔  firestore: Rules updated. 
[debug] [2024-01-04T23:49:33.920Z] Jan 04, 2024 11:49:33 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:49:33 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:49:49.111Z] >>> [apiv2][query] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast [none]
[debug] [2024-01-04T23:49:49.111Z] >>> [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"eventId":"b4b30d53-5e99-485c-9516-ea4844d6ba80","eventType":"providers/firebase.auth/eventTypes/user.delete","resource":{"name":"projects/ptate-df901","service":"firebaseauth.googleapis.com"},"params":{},"timestamp":"2024-01-04T23:49:49.111Z","data":{"uid":"dTff6Ij7bNtwJ4aJxy6aWc8WJYiy","email":"lucymaber0@gmail.com","emailVerified":false,"metadata":{"creationTime":"2024-01-04T23:45:27.354Z","lastSignInTime":"2024-01-04T23:45:27.406Z"},"customClaims":{},"providerData":[{"providerId":"password","email":"lucymaber0@gmail.com","federatedId":"lucymaber0@gmail.com","rawId":"lucymaber0@gmail.com"}]}}
[debug] [2024-01-04T23:49:49.116Z] <<< [apiv2][status] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast 200
[debug] [2024-01-04T23:49:49.116Z] <<< [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"status":"multicast_acknowledged"}
[debug] [2024-01-04T23:49:54.958Z] >>> [apiv2][query] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast [none]
[debug] [2024-01-04T23:49:54.958Z] >>> [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"eventId":"3a85f665-afff-4937-bcf5-af5a12cf79b6","eventType":"providers/firebase.auth/eventTypes/user.create","resource":{"name":"projects/ptate-df901","service":"firebaseauth.googleapis.com"},"params":{},"timestamp":"2024-01-04T23:49:54.958Z","data":{"uid":"xvwOd4B524jk58rs1ozd4hT6X3zR","email":"lucymaber0@gmail.com","emailVerified":false,"metadata":{"creationTime":"2024-01-04T23:49:54.957Z","lastSignInTime":"2024-01-04T23:49:54.957Z"},"customClaims":{},"providerData":[{"providerId":"password","email":"lucymaber0@gmail.com","federatedId":"lucymaber0@gmail.com","rawId":"lucymaber0@gmail.com"}]}}
[debug] [2024-01-04T23:49:54.964Z] <<< [apiv2][status] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast 200
[debug] [2024-01-04T23:49:54.964Z] <<< [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"status":"multicast_acknowledged"}
[debug] [2024-01-04T23:49:55.032Z] Jan 04, 2024 11:49:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:49:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:49:55.053Z] Jan 04, 2024 11:49:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:49:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:49:55.062Z] Jan 04, 2024 11:49:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:49:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:49:55.102Z] Jan 04, 2024 11:49:55 PM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError
WARNING: Operation failed: 
false for 'create' @ L57, false for 'update' @ L57
com.google.cloud.datastore.core.exception.DatastoreException: 
false for 'create' @ L57, false for 'update' @ L57
	at com.google.cloud.datastore.core.exception.DatastoreException$Builder.build(DatastoreException.java:120)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.verboseError(EmulatorRulesAuthorizer.java:321)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.withVerboseErrors(EmulatorRulesAuthorizer.java:298)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.checkCommit(EmulatorRulesAuthorizer.java:130)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.commitHelper(CloudFirestoreV1.java:1045)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:955)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:942)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.write(CloudFirestoreV1.java:930)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.handleRequest(CloudFirestoreV1WriteStream.java:210)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.write(CloudFirestoreV1WriteStream.java:138)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:93)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:26)
	at com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:160)
	at com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:130)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.onMessage(ChannelInternalImpl.java:525)
	at com.google.net.webchannel.server.v8.ForwardChannel.deliverMessage(ForwardChannel.java:114)
	at com.google.net.webchannel.server.v8.ForwardChannel.processPendingRequest(ForwardChannel.java:93)
	at com.google.net.webchannel.server.v8.ForwardChannel.consume(ForwardChannel.java:67)
	at com.google.net.webchannel.server.v8.ForwardChannel.add(ForwardChannel.java:60)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.handleRequestBody(ChannelInternalImpl.java:290)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.processSessionRequest(ChannelInternalImpl.java:357)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.handle(ChannelInternalImpl.java:172)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.consume(ChannelInternalImpl.java:91)
	at com.google.net.webchannel.server.common.ChannelProcessor.run(ChannelProcessor.java:86)

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:49:55 PM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError\nWARNING: Operation failed: \nfalse for 'create' @ L57, false for 'update' @ L57\ncom.google.cloud.datastore.core.exception.DatastoreException: \nfalse for 'create' @ L57, false for 'update' @ L57\n\tat com.google.cloud.datastore.core.exception.DatastoreException$Builder.build(DatastoreException.java:120)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.verboseError(EmulatorRulesAuthorizer.java:321)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.withVerboseErrors(EmulatorRulesAuthorizer.java:298)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesAuthorizer.checkCommit(EmulatorRulesAuthorizer.java:130)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.commitHelper(CloudFirestoreV1.java:1045)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:955)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:942)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.write(CloudFirestoreV1.java:930)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.handleRequest(CloudFirestoreV1WriteStream.java:210)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.write(CloudFirestoreV1WriteStream.java:138)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:93)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:26)\n\tat com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:160)\n\tat com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:130)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.onMessage(ChannelInternalImpl.java:525)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.deliverMessage(ForwardChannel.java:114)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.processPendingRequest(ForwardChannel.java:93)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.consume(ForwardChannel.java:67)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.add(ForwardChannel.java:60)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.handleRequestBody(ChannelInternalImpl.java:290)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.processSessionRequest(ChannelInternalImpl.java:357)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.handle(ChannelInternalImpl.java:172)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.consume(ChannelInternalImpl.java:91)\n\tat com.google.net.webchannel.server.common.ChannelProcessor.run(ChannelProcessor.java:86)\n\n"}}
[debug] [2024-01-04T23:49:55.116Z] Jan 04, 2024 11:49:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:49:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:49:55.118Z] Jan 04, 2024 11:49:55 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler onClose
INFO: channel closed
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:49:55 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler onClose\nINFO: channel closed\n"}}
[debug] [2024-01-04T23:50:08.544Z] Jan 04, 2024 11:50:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:50:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:50:17.943Z] >>> [apiv2][query] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast [none]
[debug] [2024-01-04T23:50:17.943Z] >>> [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"eventId":"371c7311-8a80-4b58-8471-77274ac574b9","eventType":"providers/firebase.auth/eventTypes/user.delete","resource":{"name":"projects/ptate-df901","service":"firebaseauth.googleapis.com"},"params":{},"timestamp":"2024-01-04T23:50:17.943Z","data":{"uid":"xvwOd4B524jk58rs1ozd4hT6X3zR","email":"lucymaber0@gmail.com","emailVerified":false,"metadata":{"creationTime":"2024-01-04T23:49:54.957Z","lastSignInTime":"2024-01-04T23:49:54.988Z"},"customClaims":{},"providerData":[{"providerId":"password","email":"lucymaber0@gmail.com","federatedId":"lucymaber0@gmail.com","rawId":"lucymaber0@gmail.com"}]}}
[debug] [2024-01-04T23:50:17.946Z] <<< [apiv2][status] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast 200
[debug] [2024-01-04T23:50:17.946Z] <<< [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"status":"multicast_acknowledged"}
[debug] [2024-01-04T23:50:20.018Z] Jan 04, 2024 11:50:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:50:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T23:51:26.072Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T23:51:26.073Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string &&// isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && //isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      // allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      // allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      // isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n        return candidateIds is list &&\n        candidateIds.size() > 0;\n        \n      }\n    }\n  }\n}\n"}]}}
[debug] [2024-01-04T23:51:26.075Z] Jan 04, 2024 11:51:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:51:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:51:26.115Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T23:51:26.115Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":63,"column":9,"currentOffset":2966,"endOffset":2967},"description":"Unexpected '&&'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":65,"column":9,"currentOffset":3165,"endOffset":3166},"description":"Unexpected '&&'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:63:9 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:65:9 - ERROR Unexpected '&&'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T23:51:26.423Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T23:51:26.423Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string &&// isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && //isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      // allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      // allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      // isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n        return candidateIds is list &&\n        candidateIds.size() > 0;\n        \n      }\n    }\n  }\n}\n"}]}}
[debug] [2024-01-04T23:51:26.427Z] Jan 04, 2024 11:51:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:51:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:51:26.521Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T23:51:26.521Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":63,"column":9,"currentOffset":2966,"endOffset":2967},"description":"Unexpected '&&'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":65,"column":9,"currentOffset":3165,"endOffset":3166},"description":"Unexpected '&&'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:63:9 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:65:9 - ERROR Unexpected '&&'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T23:51:27.050Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T23:51:27.050Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string &&// isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && //isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      // allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      // allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      // isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n        return candidateIds is list &&\n        candidateIds.size() > 0;\n        \n      }\n    }\n  }\n}\n"}]}}
[debug] [2024-01-04T23:51:27.051Z] Jan 04, 2024 11:51:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:51:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:51:27.076Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T23:51:27.076Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":63,"column":9,"currentOffset":2966,"endOffset":2967},"description":"Unexpected '&&'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":65,"column":9,"currentOffset":3165,"endOffset":3166},"description":"Unexpected '&&'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:63:9 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:65:9 - ERROR Unexpected '&&'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T23:51:27.606Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T23:51:27.606Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string &&// isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && //isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      // allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      // allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      // isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n        return candidateIds is list &&\n        candidateIds.size() > 0;\n        \n      }\n    }\n  }\n}\n"}]}}
[debug] [2024-01-04T23:51:27.608Z] Jan 04, 2024 11:51:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:51:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:51:27.663Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T23:51:27.663Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":63,"column":9,"currentOffset":2966,"endOffset":2967},"description":"Unexpected '&&'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":65,"column":9,"currentOffset":3165,"endOffset":3166},"description":"Unexpected '&&'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:63:9 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:65:9 - ERROR Unexpected '&&'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T23:51:28.106Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T23:51:28.107Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string &&// isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && //isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      // allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      // allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      // isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n        return candidateIds is list &&\n        candidateIds.size() > 0;\n        \n      }\n    }\n  }\n}\n"}]}}
[debug] [2024-01-04T23:51:28.109Z] Jan 04, 2024 11:51:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:51:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:51:28.136Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T23:51:28.136Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":63,"column":9,"currentOffset":2966,"endOffset":2967},"description":"Unexpected '&&'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":65,"column":9,"currentOffset":3165,"endOffset":3166},"description":"Unexpected '&&'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:63:9 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:65:9 - ERROR Unexpected '&&'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T23:51:28.242Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T23:51:28.242Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string &&// isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && //isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      // allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      // allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      // isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n        return candidateIds is list &&\n        candidateIds.size() > 0;\n        \n      }\n    }\n  }\n}\n"}]}}
[debug] [2024-01-04T23:51:28.243Z] Jan 04, 2024 11:51:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:51:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:51:28.266Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T23:51:28.266Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":63,"column":9,"currentOffset":2966,"endOffset":2967},"description":"Unexpected '&&'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":65,"column":9,"currentOffset":3165,"endOffset":3166},"description":"Unexpected '&&'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:63:9 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:65:9 - ERROR Unexpected '&&'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T23:51:28.300Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T23:51:28.300Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string &&// isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && //isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      // allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      // allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      // isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n        return candidateIds is list &&\n        candidateIds.size() > 0;\n        \n      }\n    }\n  }\n}\n"}]}}
[debug] [2024-01-04T23:51:28.302Z] Jan 04, 2024 11:51:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:51:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:51:28.327Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T23:51:28.327Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":63,"column":9,"currentOffset":2966,"endOffset":2967},"description":"Unexpected '&&'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":65,"column":9,"currentOffset":3165,"endOffset":3166},"description":"Unexpected '&&'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:63:9 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:65:9 - ERROR Unexpected '&&'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T23:51:31.378Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T23:51:31.378Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string &&// isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string && //isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      // allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      // allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      // isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n        return candidateIds is list &&\n        candidateIds.size() > 0;\n        \n      }\n    }\n  }\n}\n"}]}}
[debug] [2024-01-04T23:51:31.383Z] Jan 04, 2024 11:51:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:51:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:51:31.443Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T23:51:31.443Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":63,"column":9,"currentOffset":2966,"endOffset":2967},"description":"Unexpected '&&'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":65,"column":9,"currentOffset":3165,"endOffset":3166},"description":"Unexpected '&&'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:63:9 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:65:9 - ERROR Unexpected '&&'. 
[info] ✔  firestore: Rules updated. 
[debug] [2024-01-04T23:51:35.393Z] Jan 04, 2024 11:51:35 PM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError
WARNING: Operation failed: Error compiling rules:
L63:9 Unexpected '&&'.
L65:9 Unexpected '&&'.
com.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:
L63:9 Unexpected '&&'.
L65:9 Unexpected '&&'.
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:115)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:74)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.getAuthorizer(EmulatorRulesCompiler.java:67)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.listCollectionIds(CloudFirestoreV1.java:642)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1Router.listCollectionIds(CloudFirestoreV1Router.java:212)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.lambda$listCollectionIds$12(FirestoreV1GrpcAdapter.java:201)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.unary(FirestoreV1GrpcAdapter.java:70)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.listCollectionIds(FirestoreV1GrpcAdapter.java:201)
	at com.google.firestore.v1.FirestoreGrpc$MethodHandlers.invoke(FirestoreGrpc.java:1199)
	at io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:346)
	at io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:860)
	at io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)
	at io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:133)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:101)
	... 24 more

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:51:35 PM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError\nWARNING: Operation failed: Error compiling rules:\nL63:9 Unexpected '&&'.\nL65:9 Unexpected '&&'.\ncom.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:\nL63:9 Unexpected '&&'.\nL65:9 Unexpected '&&'.\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:115)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:74)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.getAuthorizer(EmulatorRulesCompiler.java:67)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.listCollectionIds(CloudFirestoreV1.java:642)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1Router.listCollectionIds(CloudFirestoreV1Router.java:212)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.lambda$listCollectionIds$12(FirestoreV1GrpcAdapter.java:201)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.unary(FirestoreV1GrpcAdapter.java:70)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.listCollectionIds(FirestoreV1GrpcAdapter.java:201)\n\tat com.google.firestore.v1.FirestoreGrpc$MethodHandlers.invoke(FirestoreGrpc.java:1199)\n\tat io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:346)\n\tat io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:860)\n\tat io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)\n\tat io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:133)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\tat java.base/java.lang.Thread.run(Thread.java:840)\nCaused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:101)\n\t... 24 more\n\n"}}
[debug] [2024-01-04T23:51:35.395Z] Jan 04, 2024 11:51:35 PM io.gapi.emulators.netty.HttpHandler$1 onError
INFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:
L63:9 Unexpected '&&'.
L65:9 Unexpected '&&'.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:51:35 PM io.gapi.emulators.netty.HttpHandler$1 onError\nINFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:\nL63:9 Unexpected '&&'.\nL65:9 Unexpected '&&'.\n"}}
[debug] [2024-01-04T23:51:36.107Z] Jan 04, 2024 11:51:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:51:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:51:39.448Z] Jan 04, 2024 11:51:39 PM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError
WARNING: Operation failed: Error compiling rules:
L63:9 Unexpected '&&'.
L65:9 Unexpected '&&'.
com.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:
L63:9 Unexpected '&&'.
L65:9 Unexpected '&&'.
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:115)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:74)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.getAuthorizer(EmulatorRulesCompiler.java:67)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.listCollectionIds(CloudFirestoreV1.java:642)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1Router.listCollectionIds(CloudFirestoreV1Router.java:212)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.lambda$listCollectionIds$12(FirestoreV1GrpcAdapter.java:201)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.unary(FirestoreV1GrpcAdapter.java:70)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.listCollectionIds(FirestoreV1GrpcAdapter.java:201)
	at com.google.firestore.v1.FirestoreGrpc$MethodHandlers.invoke(FirestoreGrpc.java:1199)
	at io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:346)
	at io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:860)
	at io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)
	at io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:133)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:101)
	... 24 more

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:51:39 PM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError\nWARNING: Operation failed: Error compiling rules:\nL63:9 Unexpected '&&'.\nL65:9 Unexpected '&&'.\ncom.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:\nL63:9 Unexpected '&&'.\nL65:9 Unexpected '&&'.\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:115)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:74)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.getAuthorizer(EmulatorRulesCompiler.java:67)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.listCollectionIds(CloudFirestoreV1.java:642)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1Router.listCollectionIds(CloudFirestoreV1Router.java:212)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.lambda$listCollectionIds$12(FirestoreV1GrpcAdapter.java:201)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.unary(FirestoreV1GrpcAdapter.java:70)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.listCollectionIds(FirestoreV1GrpcAdapter.java:201)\n\tat com.google.firestore.v1.FirestoreGrpc$MethodHandlers.invoke(FirestoreGrpc.java:1199)\n\tat io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:346)\n\tat io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:860)\n\tat io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)\n\tat io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:133)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\tat java.base/java.lang.Thread.run(Thread.java:840)\nCaused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:101)\n\t... 24 more\n\n"}}
[debug] [2024-01-04T23:51:39.454Z] Jan 04, 2024 11:51:39 PM io.gapi.emulators.netty.HttpHandler$1 onError
INFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:
L63:9 Unexpected '&&'.
L65:9 Unexpected '&&'.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:51:39 PM io.gapi.emulators.netty.HttpHandler$1 onError\nINFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:\nL63:9 Unexpected '&&'.\nL65:9 Unexpected '&&'.\n"}}
[debug] [2024-01-04T23:51:53.503Z] >>> [apiv2][query] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast [none]
[debug] [2024-01-04T23:51:53.504Z] >>> [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"eventId":"0af34cb3-e8bd-4cb1-837a-65a183f52873","eventType":"providers/firebase.auth/eventTypes/user.create","resource":{"name":"projects/ptate-df901","service":"firebaseauth.googleapis.com"},"params":{},"timestamp":"2024-01-04T23:51:53.502Z","data":{"uid":"emtrKDEL5OYOJYCCmjld6vkcpsGB","email":"lucymaber0@gmail.com","emailVerified":false,"metadata":{"creationTime":"2024-01-04T23:51:53.502Z","lastSignInTime":"2024-01-04T23:51:53.502Z"},"customClaims":{},"providerData":[{"providerId":"password","email":"lucymaber0@gmail.com","federatedId":"lucymaber0@gmail.com","rawId":"lucymaber0@gmail.com"}]}}
[debug] [2024-01-04T23:51:53.519Z] <<< [apiv2][status] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast 200
[debug] [2024-01-04T23:51:53.519Z] <<< [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"status":"multicast_acknowledged"}
[debug] [2024-01-04T23:51:53.687Z] Jan 04, 2024 11:51:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:51:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:51:53.703Z] Jan 04, 2024 11:51:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:51:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:51:53.713Z] Jan 04, 2024 11:51:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:51:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:51:53.727Z] Jan 04, 2024 11:51:53 PM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError
WARNING: Operation failed: Error compiling rules:
L63:9 Unexpected '&&'.
L65:9 Unexpected '&&'.
com.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:
L63:9 Unexpected '&&'.
L65:9 Unexpected '&&'.
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:115)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:74)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.getAuthorizer(EmulatorRulesCompiler.java:67)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.commitHelper(CloudFirestoreV1.java:1045)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:955)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:942)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.write(CloudFirestoreV1.java:930)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.handleRequest(CloudFirestoreV1WriteStream.java:210)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.write(CloudFirestoreV1WriteStream.java:138)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:93)
	at com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:26)
	at com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:160)
	at com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:130)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.onMessage(ChannelInternalImpl.java:525)
	at com.google.net.webchannel.server.v8.ForwardChannel.deliverMessage(ForwardChannel.java:114)
	at com.google.net.webchannel.server.v8.ForwardChannel.processPendingRequest(ForwardChannel.java:93)
	at com.google.net.webchannel.server.v8.ForwardChannel.consume(ForwardChannel.java:67)
	at com.google.net.webchannel.server.v8.ForwardChannel.add(ForwardChannel.java:60)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.handleRequestBody(ChannelInternalImpl.java:290)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.processSessionRequest(ChannelInternalImpl.java:357)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.handle(ChannelInternalImpl.java:172)
	at com.google.net.webchannel.server.v8.ChannelInternalImpl.consume(ChannelInternalImpl.java:91)
	at com.google.net.webchannel.server.common.ChannelProcessor.run(ChannelProcessor.java:86)
Caused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:101)
	... 22 more

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:51:53 PM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError\nWARNING: Operation failed: Error compiling rules:\nL63:9 Unexpected '&&'.\nL65:9 Unexpected '&&'.\ncom.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:\nL63:9 Unexpected '&&'.\nL65:9 Unexpected '&&'.\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:115)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:74)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.getAuthorizer(EmulatorRulesCompiler.java:67)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.commitHelper(CloudFirestoreV1.java:1045)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:955)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.internalCommit(CloudFirestoreV1.java:942)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1.write(CloudFirestoreV1.java:930)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.handleRequest(CloudFirestoreV1WriteStream.java:210)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.write(CloudFirestoreV1WriteStream.java:138)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:93)\n\tat com.google.cloud.datastore.emulator.impl.firestore.CloudFirestoreV1WriteStream.onNext(CloudFirestoreV1WriteStream.java:26)\n\tat com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:160)\n\tat com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler.onMessage(FirestoreV1WebChannelAdapter.java:130)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.onMessage(ChannelInternalImpl.java:525)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.deliverMessage(ForwardChannel.java:114)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.processPendingRequest(ForwardChannel.java:93)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.consume(ForwardChannel.java:67)\n\tat com.google.net.webchannel.server.v8.ForwardChannel.add(ForwardChannel.java:60)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.handleRequestBody(ChannelInternalImpl.java:290)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.processSessionRequest(ChannelInternalImpl.java:357)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.handle(ChannelInternalImpl.java:172)\n\tat com.google.net.webchannel.server.v8.ChannelInternalImpl.consume(ChannelInternalImpl.java:91)\n\tat com.google.net.webchannel.server.common.ChannelProcessor.run(ChannelProcessor.java:86)\nCaused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:101)\n\t... 22 more\n\n"}}
[debug] [2024-01-04T23:51:53.735Z] Jan 04, 2024 11:51:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:51:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:51:53.742Z] Jan 04, 2024 11:51:53 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler onClose
INFO: channel closed
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:51:53 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler onClose\nINFO: channel closed\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T23:52:18.477Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T23:52:18.477Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string //&& isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string //&& isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      // allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      // allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      // isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n        return candidateIds is list &&\n        candidateIds.size() > 0;\n        \n      }\n    }\n  }\n}\n"}]}}
[debug] [2024-01-04T23:52:18.480Z] Jan 04, 2024 11:52:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:52:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:52:18.535Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T23:52:18.536Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":6,"column":14,"currentOffset":125,"endOffset":142},"description":"Unused function: isValidPhoneNumber.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":12,"column":14,"currentOffset":457,"endOffset":468},"description":"Unused function: isValidEmail.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":36,"column":14,"currentOffset":1479,"endOffset":1489},"description":"Unused function: isUserAdmin.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":37,"column":14,"currentOffset":1511,"endOffset":1513},"description":"Invalid function name: get.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":39,"column":14,"currentOffset":1610,"endOffset":1619},"description":"Unused function: isValidDOB.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":44,"column":14,"currentOffset":1852,"endOffset":1867},"description":"Unused function: isValidFirstName.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":50,"column":14,"currentOffset":2111,"endOffset":2125},"description":"Unused function: isValidLastName.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":53,"column":59,"currentOffset":2321,"endOffset":2329},"description":"Invalid variable name: firstName.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":77,"column":16,"currentOffset":3670,"endOffset":3688},"description":"Unused function: isValidElectionData.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":92,"column":60,"currentOffset":4357,"endOffset":4359},"description":"Invalid function name: now.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":98,"column":56,"currentOffset":4606,"endOffset":4608},"description":"Invalid function name: now.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":116,"column":16,"currentOffset":5313,"endOffset":5332},"description":"Unused function: isValidCandidateData.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":132,"column":16,"currentOffset":5933,"endOffset":5947},"description":"Unused function: isValidVoteData.","severity":"WARNING"}]}
[warn] ⚠  firestore.rules:6:14 - WARNING Unused function: isValidPhoneNumber. 
[warn] ⚠  firestore.rules:12:14 - WARNING Unused function: isValidEmail. 
[warn] ⚠  firestore.rules:36:14 - WARNING Unused function: isUserAdmin. 
[warn] ⚠  firestore.rules:37:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:39:14 - WARNING Unused function: isValidDOB. 
[warn] ⚠  firestore.rules:44:14 - WARNING Unused function: isValidFirstName. 
[warn] ⚠  firestore.rules:50:14 - WARNING Unused function: isValidLastName. 
[warn] ⚠  firestore.rules:53:59 - WARNING Invalid variable name: firstName. 
[warn] ⚠  firestore.rules:77:16 - WARNING Unused function: isValidElectionData. 
[warn] ⚠  firestore.rules:92:60 - WARNING Invalid function name: now. 
[warn] ⚠  firestore.rules:98:56 - WARNING Invalid function name: now. 
[warn] ⚠  firestore.rules:116:16 - WARNING Unused function: isValidCandidateData. 
[warn] ⚠  firestore.rules:132:16 - WARNING Unused function: isValidVoteData. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T23:52:18.753Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T23:52:18.754Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string //&& isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string //&& isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      // allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      // allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      // isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n        return candidateIds is list &&\n        candidateIds.size() > 0;\n        \n      }\n    }\n  }\n}\n"}]}}
[debug] [2024-01-04T23:52:18.759Z] Jan 04, 2024 11:52:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:52:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:52:18.886Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T23:52:18.886Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":6,"column":14,"currentOffset":125,"endOffset":142},"description":"Unused function: isValidPhoneNumber.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":12,"column":14,"currentOffset":457,"endOffset":468},"description":"Unused function: isValidEmail.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":36,"column":14,"currentOffset":1479,"endOffset":1489},"description":"Unused function: isUserAdmin.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":37,"column":14,"currentOffset":1511,"endOffset":1513},"description":"Invalid function name: get.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":39,"column":14,"currentOffset":1610,"endOffset":1619},"description":"Unused function: isValidDOB.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":44,"column":14,"currentOffset":1852,"endOffset":1867},"description":"Unused function: isValidFirstName.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":50,"column":14,"currentOffset":2111,"endOffset":2125},"description":"Unused function: isValidLastName.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":53,"column":59,"currentOffset":2321,"endOffset":2329},"description":"Invalid variable name: firstName.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":77,"column":16,"currentOffset":3670,"endOffset":3688},"description":"Unused function: isValidElectionData.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":92,"column":60,"currentOffset":4357,"endOffset":4359},"description":"Invalid function name: now.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":98,"column":56,"currentOffset":4606,"endOffset":4608},"description":"Invalid function name: now.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":116,"column":16,"currentOffset":5313,"endOffset":5332},"description":"Unused function: isValidCandidateData.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":132,"column":16,"currentOffset":5933,"endOffset":5947},"description":"Unused function: isValidVoteData.","severity":"WARNING"}]}
[warn] ⚠  firestore.rules:6:14 - WARNING Unused function: isValidPhoneNumber. 
[warn] ⚠  firestore.rules:12:14 - WARNING Unused function: isValidEmail. 
[warn] ⚠  firestore.rules:36:14 - WARNING Unused function: isUserAdmin. 
[warn] ⚠  firestore.rules:37:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:39:14 - WARNING Unused function: isValidDOB. 
[warn] ⚠  firestore.rules:44:14 - WARNING Unused function: isValidFirstName. 
[warn] ⚠  firestore.rules:50:14 - WARNING Unused function: isValidLastName. 
[warn] ⚠  firestore.rules:53:59 - WARNING Invalid variable name: firstName. 
[warn] ⚠  firestore.rules:77:16 - WARNING Unused function: isValidElectionData. 
[warn] ⚠  firestore.rules:92:60 - WARNING Invalid function name: now. 
[warn] ⚠  firestore.rules:98:56 - WARNING Invalid function name: now. 
[warn] ⚠  firestore.rules:116:16 - WARNING Unused function: isValidCandidateData. 
[warn] ⚠  firestore.rules:132:16 - WARNING Unused function: isValidVoteData. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2024-01-04T23:52:19.503Z] >>> [apiv2][query] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules [none]
[debug] [2024-01-04T23:52:19.503Z] >>> [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Other rules...\n    function isValidPhoneNumber(phone) {\n      // Define your custom logic to validate the phone number format\n      // For example, you can use regular expressions to check the format\n      // Replace the following regular expression with your own validation logic\n      return phone.matches(\"^\\\\+\\\\([0-9]+\\\\)#\\\\* [0-9]+$\");\n    }\n    function isValidEmail(email) {\n      // Define your custom logic to validate the email address format\n      // Replace the following regular expression with your own validation logic\n      return email.matches(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    }\n\n    function isValidAddress(address) {\n      // Check if the address has the required fields\n      return address is map &&\n      'addressLines' in address &&\n      'postcode' in address &&\n      'locality' in address &&\n      'regionCode' in address &&\n      address.addressLines is list && address.addressLines.size() >= 2 &&\n      address.addressLines[0] is string && \n      address.addressLines[1] is string &&\n      address.addressLines[0].size() >= 1 &&\n      address.addressLines[1].size() >= 1 &&\n      address.addressLines[0].size() <= 255 &&\n      address.addressLines[1].size() <= 255 &&\n      address.postcode is string &&\n      address.locality is string &&\n      address.regionCode is string && address.regionCode.size() == 2;\n    }\n    function isUserAdmin(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data.role.hasAny(['admin']);\n    }\n    function isValidDOB(dob) {\n      // Define your custom logic to validate the date of birth format\n      // This is a basic example, you might want to adjust it based on your needs\n      return dob.matches(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n    }\n    function isValidFirstName(firstName) {\n      // Define your custom logic to validate the first name\n      // This is a basic example; adjust it based on your needs\n      return firstName is string && firstName.length > 0 && firstName.length < 255;\n    }\n\n    function isValidLastName(lastName) {\n      // Define your custom logic to validate the last name\n      // This is a basic example; adjust it based on your needs\n      return lastName is string && lastName.length > 0 && firstName.length < 255;\n    }\n    // User document rules\n    match /user/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId\n        && request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'dob', 'address', 'phone', 'role'])\n        && request.resource.data.email is string // && isValidEmail(request.resource.data.email)\n        && request.resource.data.firstName is string //&& isValidFirstName(firstName)\n        && request.resource.data.lastName is string //&& isValidLastName(lastName)\n        && request.resource.data.dob is string //&& isValidDOB(request.resource.data.dob)\n        && request.resource.data.address is map && isValidAddress(request.resource.data.address)\n        && request.resource.data.phone is string //&& isValidPhoneNumber(request.resource.data.phone)\n        && request.resource.data.role is list && request.resource.data.role.size() == 0;\n      // allow read, write: if isUserAdmin(request.auth.uid);\n    }\n\n    // Rules for /election/{electionId} path\n    match /election/{electionId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidElectionData(request.resource.data);\n\n      // Function to check if the election data is valid\n      function isValidElectionData(data) {\n        return data != null &&\n        data.keys().hasAll(['startTime', 'endTime', 'title']) &&\n        data.startTime is timestamp &&\n        data.endTime is timestamp &&\n        data.title is string &&\n        // Add additional conditions for start time, end time, and title as needed\n        isValidStartTime(data.startTime) &&\n        isValidEndTime(data.endTime) &&\n        isValidTitle(data.title);\n      }\n\n      // Function to check if the start time is valid (customize as needed)\n      function isValidStartTime(startTime) {\n        // Add your specific logic for validating the start time\n        return startTime != null && startTime.toMillis() > now();\n      }\n\n      // Function to check if the end time is valid (customize as needed)\n      function isValidEndTime(endTime) {\n        // Add your specific logic for validating the end time\n        return endTime != null && endTime.toMillis() > now();\n      }\n\n      // Function to check if the title is valid (customize as needed)\n      function isValidTitle(title) {\n        // Add your specific logic for validating the title\n        return title != null && title.matches(\"^[a-zA-Z0-9 ]+$\"); // Example: Alphanumeric with spaces\n      }\n    }\n\n    // Rules for /election/{electionId}/candidate/{candidateId} path\n    match /election/{electionId}/candidate/{candidateId} {\n      allow read: if request.auth != null; // Add your specific conditions for read\n\n      // allow read, write: if isUserAdmin(request.auth.uid) &&\n      // isValidCandidateData(request.resource.data);\n\n      // Function to check if the candidate data is valid\n      function isValidCandidateData(data) {\n        return data != null &&\n        data.keys().hasAll(['name', 'description']) &&\n        data.name is string &&\n        data.description is string;\n      }\n    }\n\n    // Rules for /election/{electionId}/vote/{userId} path\n    match /election/{electionId}/vote/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId; // Allow the user to read their own vote\n\n      // allow write: if request.auth != null && isUserAdmin(request.auth.uid) &&\n      // isValidVoteData(request.resource.data);\n\n      // Function to check if the vote data is valid\n      function isValidVoteData(data) {\n        return data != null &&\n        data.keys().hasAll(['candidateIds']) &&\n        data.candidateIds is list &&\n        isValidCandidateIds(data.candidateIds);\n        // Add additional conditions if needed (e.g., checking if the candidateIds are valid)\n      }\n\n      // Function to check if the candidateIds are valid\n      function isValidCandidateIds(candidateIds) {\n        // Add your specific logic for validating the list of candidateIds\n        // For example, ensure that each candidateId is a string\n        return candidateIds is list &&\n        candidateIds.size() > 0;\n        \n      }\n    }\n  }\n}\n"}]}}
[debug] [2024-01-04T23:52:19.506Z] Jan 04, 2024 11:52:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:52:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:52:19.570Z] <<< [apiv2][status] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules 200
[debug] [2024-01-04T23:52:19.570Z] <<< [apiv2][body] PUT http://127.0.0.1:8081/emulator/v1/projects/ptate-df901:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":6,"column":14,"currentOffset":125,"endOffset":142},"description":"Unused function: isValidPhoneNumber.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":12,"column":14,"currentOffset":457,"endOffset":468},"description":"Unused function: isValidEmail.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":36,"column":14,"currentOffset":1479,"endOffset":1489},"description":"Unused function: isUserAdmin.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":37,"column":14,"currentOffset":1511,"endOffset":1513},"description":"Invalid function name: get.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":39,"column":14,"currentOffset":1610,"endOffset":1619},"description":"Unused function: isValidDOB.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":44,"column":14,"currentOffset":1852,"endOffset":1867},"description":"Unused function: isValidFirstName.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":50,"column":14,"currentOffset":2111,"endOffset":2125},"description":"Unused function: isValidLastName.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":53,"column":59,"currentOffset":2321,"endOffset":2329},"description":"Invalid variable name: firstName.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":77,"column":16,"currentOffset":3670,"endOffset":3688},"description":"Unused function: isValidElectionData.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":92,"column":60,"currentOffset":4357,"endOffset":4359},"description":"Invalid function name: now.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":98,"column":56,"currentOffset":4606,"endOffset":4608},"description":"Invalid function name: now.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":116,"column":16,"currentOffset":5313,"endOffset":5332},"description":"Unused function: isValidCandidateData.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":132,"column":16,"currentOffset":5933,"endOffset":5947},"description":"Unused function: isValidVoteData.","severity":"WARNING"}]}
[warn] ⚠  firestore.rules:6:14 - WARNING Unused function: isValidPhoneNumber. 
[warn] ⚠  firestore.rules:12:14 - WARNING Unused function: isValidEmail. 
[warn] ⚠  firestore.rules:36:14 - WARNING Unused function: isUserAdmin. 
[warn] ⚠  firestore.rules:37:14 - WARNING Invalid function name: get. 
[warn] ⚠  firestore.rules:39:14 - WARNING Unused function: isValidDOB. 
[warn] ⚠  firestore.rules:44:14 - WARNING Unused function: isValidFirstName. 
[warn] ⚠  firestore.rules:50:14 - WARNING Unused function: isValidLastName. 
[warn] ⚠  firestore.rules:53:59 - WARNING Invalid variable name: firstName. 
[warn] ⚠  firestore.rules:77:16 - WARNING Unused function: isValidElectionData. 
[warn] ⚠  firestore.rules:92:60 - WARNING Invalid function name: now. 
[warn] ⚠  firestore.rules:98:56 - WARNING Invalid function name: now. 
[warn] ⚠  firestore.rules:116:16 - WARNING Unused function: isValidCandidateData. 
[warn] ⚠  firestore.rules:132:16 - WARNING Unused function: isValidVoteData. 
[info] ✔  firestore: Rules updated. 
[debug] [2024-01-04T23:52:34.308Z] >>> [apiv2][query] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast [none]
[debug] [2024-01-04T23:52:34.309Z] >>> [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"eventId":"20a3459e-749e-40ae-80ec-a7f10e75ad47","eventType":"providers/firebase.auth/eventTypes/user.delete","resource":{"name":"projects/ptate-df901","service":"firebaseauth.googleapis.com"},"params":{},"timestamp":"2024-01-04T23:52:34.308Z","data":{"uid":"emtrKDEL5OYOJYCCmjld6vkcpsGB","email":"lucymaber0@gmail.com","emailVerified":false,"metadata":{"creationTime":"2024-01-04T23:51:53.502Z","lastSignInTime":"2024-01-04T23:51:53.671Z"},"customClaims":{},"providerData":[{"providerId":"password","email":"lucymaber0@gmail.com","federatedId":"lucymaber0@gmail.com","rawId":"lucymaber0@gmail.com"}]}}
[debug] [2024-01-04T23:52:34.314Z] <<< [apiv2][status] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast 200
[debug] [2024-01-04T23:52:34.314Z] <<< [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"status":"multicast_acknowledged"}
[debug] [2024-01-04T23:52:39.123Z] >>> [apiv2][query] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast [none]
[debug] [2024-01-04T23:52:39.124Z] >>> [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"eventId":"8ef49ed7-6e48-4323-a460-a89285b4cfaa","eventType":"providers/firebase.auth/eventTypes/user.create","resource":{"name":"projects/ptate-df901","service":"firebaseauth.googleapis.com"},"params":{},"timestamp":"2024-01-04T23:52:39.123Z","data":{"uid":"uO2qzxXAQI27md0R7dLlaFJR2LBT","email":"lucymaber0@gmail.com","emailVerified":false,"metadata":{"creationTime":"2024-01-04T23:52:39.122Z","lastSignInTime":"2024-01-04T23:52:39.122Z"},"customClaims":{},"providerData":[{"providerId":"password","email":"lucymaber0@gmail.com","federatedId":"lucymaber0@gmail.com","rawId":"lucymaber0@gmail.com"}]}}
[debug] [2024-01-04T23:52:39.132Z] <<< [apiv2][status] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast 200
[debug] [2024-01-04T23:52:39.133Z] <<< [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"status":"multicast_acknowledged"}
[debug] [2024-01-04T23:52:39.225Z] Jan 04, 2024 11:52:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:52:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:52:39.302Z] Jan 04, 2024 11:52:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
Jan 04, 2024 11:52:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:52:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\nJan 04, 2024 11:52:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:52:39.318Z] Jan 04, 2024 11:52:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:52:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:52:39.322Z] Jan 04, 2024 11:52:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:52:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:52:39.343Z] Jan 04, 2024 11:52:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:52:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:52:39.375Z] Jan 04, 2024 11:52:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:52:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:52:40.446Z] Jan 04, 2024 11:52:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:52:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:53:09.399Z] Jan 04, 2024 11:53:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:53:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:53:21.744Z] Jan 04, 2024 11:53:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:53:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:53:26.634Z] Jan 04, 2024 11:53:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:53:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:53:29.064Z] >>> [apiv2][query] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast [none]
[debug] [2024-01-04T23:53:29.065Z] >>> [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"eventId":"df3c27fb-d89a-453f-b24f-7a10745a31f0","eventType":"providers/firebase.auth/eventTypes/user.delete","resource":{"name":"projects/ptate-df901","service":"firebaseauth.googleapis.com"},"params":{},"timestamp":"2024-01-04T23:53:29.064Z","data":{"uid":"uO2qzxXAQI27md0R7dLlaFJR2LBT","email":"lucymaber0@gmail.com","emailVerified":false,"metadata":{"creationTime":"2024-01-04T23:52:39.122Z","lastSignInTime":"2024-01-04T23:52:39.190Z"},"customClaims":{},"providerData":[{"providerId":"password","email":"lucymaber0@gmail.com","federatedId":"lucymaber0@gmail.com","rawId":"lucymaber0@gmail.com"}]}}
[debug] [2024-01-04T23:53:29.068Z] <<< [apiv2][status] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast 200
[debug] [2024-01-04T23:53:29.069Z] <<< [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"status":"multicast_acknowledged"}
[debug] [2024-01-04T23:54:11.730Z] >>> [apiv2][query] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast [none]
[debug] [2024-01-04T23:54:11.731Z] >>> [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"eventId":"98f23359-3dd8-4b59-991f-a47e9b0143b3","eventType":"providers/firebase.auth/eventTypes/user.create","resource":{"name":"projects/ptate-df901","service":"firebaseauth.googleapis.com"},"params":{},"timestamp":"2024-01-04T23:54:11.730Z","data":{"uid":"jQWsiKrn1sEV1ixrgPRZG2FK8tl1","email":"lucymaber0@gmail.com","emailVerified":false,"metadata":{"creationTime":"2024-01-04T23:54:11.730Z","lastSignInTime":"2024-01-04T23:54:11.730Z"},"customClaims":{},"providerData":[{"providerId":"password","email":"lucymaber0@gmail.com","federatedId":"lucymaber0@gmail.com","rawId":"lucymaber0@gmail.com"}]}}
[debug] [2024-01-04T23:54:11.741Z] <<< [apiv2][status] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast 200
[debug] [2024-01-04T23:54:11.742Z] <<< [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"status":"multicast_acknowledged"}
[debug] [2024-01-04T23:54:11.860Z] Jan 04, 2024 11:54:11 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:54:11 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:54:11.869Z] Jan 04, 2024 11:54:11 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:54:11 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:54:11.878Z] Jan 04, 2024 11:54:11 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:54:11 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:54:11.901Z] Jan 04, 2024 11:54:11 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:54:11 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:54:24.041Z] Jan 04, 2024 11:54:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:54:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:54:24.054Z] Jan 04, 2024 11:54:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:54:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:54:24.083Z] Jan 04, 2024 11:54:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:54:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:54:24.085Z] Jan 04, 2024 11:54:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:54:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:54:24.093Z] Jan 04, 2024 11:54:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:54:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:54:29.360Z] Jan 04, 2024 11:54:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:54:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:54:57.973Z] Jan 04, 2024 11:54:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:54:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:55:12.298Z] Jan 04, 2024 11:55:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:55:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:55:12.305Z] Jan 04, 2024 11:55:12 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler onClose
INFO: channel closed
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:55:12 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler onClose\nINFO: channel closed\n"}}
[debug] [2024-01-04T23:55:28.077Z] Jan 04, 2024 11:55:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:55:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:55:29.373Z] Jan 04, 2024 11:55:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:55:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:55:29.734Z] Jan 04, 2024 11:55:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:55:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:55:29.738Z] Jan 04, 2024 11:55:29 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreListenHandler onClose
INFO: channel closed
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:55:29 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreListenHandler onClose\nINFO: channel closed\n"}}
[debug] [2024-01-04T23:55:33.179Z] >>> [apiv2][query] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast [none]
[debug] [2024-01-04T23:55:33.180Z] >>> [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"eventId":"9d734d2f-b6ad-4a6e-b639-99a865cab934","eventType":"providers/firebase.auth/eventTypes/user.delete","resource":{"name":"projects/ptate-df901","service":"firebaseauth.googleapis.com"},"params":{},"timestamp":"2024-01-04T23:55:33.178Z","data":{"uid":"jQWsiKrn1sEV1ixrgPRZG2FK8tl1","email":"lucymaber0@gmail.com","emailVerified":false,"metadata":{"creationTime":"2024-01-04T23:54:11.730Z","lastSignInTime":"2024-01-04T23:54:11.814Z"},"customClaims":{},"providerData":[{"providerId":"password","email":"lucymaber0@gmail.com","federatedId":"lucymaber0@gmail.com","rawId":"lucymaber0@gmail.com"}]}}
[debug] [2024-01-04T23:55:33.187Z] <<< [apiv2][status] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast 200
[debug] [2024-01-04T23:55:33.188Z] <<< [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"status":"multicast_acknowledged"}
[debug] [2024-01-04T23:56:06.350Z] >>> [apiv2][query] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast [none]
[debug] [2024-01-04T23:56:06.350Z] >>> [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"eventId":"44ee7392-fc52-454f-a684-82ca012e543a","eventType":"providers/firebase.auth/eventTypes/user.create","resource":{"name":"projects/ptate-df901","service":"firebaseauth.googleapis.com"},"params":{},"timestamp":"2024-01-04T23:56:06.349Z","data":{"uid":"OOnj8XBimClWW2gjNPctcYjvt2XQ","email":"lucymaber0@gmail.com","emailVerified":false,"metadata":{"creationTime":"2024-01-04T23:56:06.349Z","lastSignInTime":"2024-01-04T23:56:06.349Z"},"customClaims":{},"providerData":[{"providerId":"password","email":"lucymaber0@gmail.com","federatedId":"lucymaber0@gmail.com","rawId":"lucymaber0@gmail.com"}]}}
[debug] [2024-01-04T23:56:06.361Z] <<< [apiv2][status] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast 200
[debug] [2024-01-04T23:56:06.361Z] <<< [apiv2][body] POST http://127.0.0.1:5001/functions/projects/ptate-df901/trigger_multicast {"status":"multicast_acknowledged"}
[debug] [2024-01-04T23:56:06.504Z] Jan 04, 2024 11:56:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:56:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:56:06.521Z] Jan 04, 2024 11:56:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:56:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:56:06.532Z] Jan 04, 2024 11:56:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:56:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:56:36.564Z] Jan 04, 2024 11:56:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:56:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:56:51.572Z] Jan 04, 2024 11:56:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:56:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:57:06.583Z] Jan 04, 2024 11:57:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:57:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:57:06.589Z] Jan 04, 2024 11:57:06 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler onClose
INFO: channel closed
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:57:06 PM com.google.cloud.datastore.emulator.firestore.webchannel.FirestoreV1WebChannelAdapter$FirestoreWriteHandler onClose\nINFO: channel closed\n"}}
[debug] [2024-01-04T23:57:36.579Z] Jan 04, 2024 11:57:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:57:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:58:36.594Z] Jan 04, 2024 11:58:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:58:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-04T23:59:52.729Z] Jan 04, 2024 11:59:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 04, 2024 11:59:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-05T00:00:52.749Z] Jan 05, 2024 12:00:52 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 05, 2024 12:00:52 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-05T00:02:08.775Z] Jan 05, 2024 12:02:08 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 05, 2024 12:02:08 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2024-01-05T00:03:24.803Z] Jan 05, 2024 12:03:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jan 05, 2024 12:03:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
