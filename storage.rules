rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return get(/databases/$(database)/documents/user/$(request.auth.uid)).data.role == 'admin';
    }
    function isUserSubscribed() {
      return exists(
        /databases/$(database)/documents/customers/$(request.auth.uid)/subscriptions/$(document)
        ) && (
          get(/databases/$(database)/documents/customers/$(request.auth.uid)/subscriptions/$(document)).data.status == 'trialing'
          ||
          get(/databases/$(database)/documents/customers/$(request.auth.uid)/subscriptions/$(document)).data.status == 'active'
        );
    }

    function isValidAddressLines(addressLines) {
      // Add your address lines validation logic here
      return addressLines is list && addressLines.size() == 2 && addressLines[0] is string && addressLines[1] is string;
    }

    function isValidUserData(user) {
      return  user.firstName is string &&
             user.lastName is string ;
            // user is map &&
            //  isValidEmail(user.email) &&
             // &&
             //user.dob is string //&&
            //  isValidPhone(user.phone) &&
            //  user.address is map &&
            //  isValidAddressLines(user.address.addressLines) &&
            //  user.address.postcode is string &&
            //  user.address.locality is string &&
            //  user.address.regionCode is string &&
            //  user.role is list && user.role.size() == 0;
    }

  function isValidAddress(address) {
    return address.addressLines is list && address.addressLines.size() == 2 &&
      address.addressLines[0] is string && address.addressLines[0].size() > 0 && address.addressLines[0].size() < 100 &&
      address.addressLines[1] is string && address.addressLines[1].size() > 0 && address.addressLines[1].size() < 100 &&
      address.postalCode is string && address.postalCode.size() > 0 && address.postalCode.size() < 100 &&
      address.locality is string && address.locality.size() > 0 && address.locality.size() < 100 &&
      address.regionCode is string && address.regionCode.size() > 0 && address.regionCode.size() < 100;
  }

    function isValidElectionData(data){
      return data.keys().hasAll(['name', 'description', 'startDate', 'endDate', 'candidates']) &&
             data.name is string && data.name.size() > 0 && data.name.size() < 100 &&
             data.description is string && data.description.size() > 0 && data.description.size() < 100 &&
             data.startDate is timestamp &&
             data.endDate is timestamp &&
             data.candidates is list && data.candidates.size() > 0 && data.candidates.size() < 100;
    }

    function isValidCandidateData(data) {
      return data.keys().hasAll(['name', 'description', 'image']) &&
             data.name is string && data.name.size() > 0 && data.name.size() < 100 &&
             data.description is string && data.description.size() > 0 && data.description.size() < 100 &&
             data.image is string && data.image.size() > 0 && data.image.size() < 100;
    }


    // Need for stripe
    match /customers/{uid} {
      allow read, write: if request.auth.uid == uid;

      match /checkout_sessions/{id} {
        allow read, write: if request.auth.uid == uid;
      }

      match /subscriptions/{id} {
        allow read: if request.auth.uid == uid;
      }

      match /payments/{id} {
        allow read: if request.auth.uid == uid;
      }
    }

    // Define rules for the 'products' collection
    match /products/{id} {
      allow read: if true;

      match /prices/{id} {
        allow read: if true;
      }

      match /tax_rates/{id} {
        allow read: if true;
      }
    }

    // User document rules
    match /user/{userId} {
      allow write: if isValidUserData(request.resource.data) & request.auth.uid == userId;
      allow read: if request.auth.uid == userId;
    }
    // Election document rules
    match /election {
      allow list: if request.auth != null
    }

    // Election document rules
    match /election/{electionId} {
      allow read: if request.auth.uid != null;
      allow write: if isAdmin();
      allow list: if request.auth != null
    }

    // Candidate document rules
    match /election/{electionId}/candidate/{candidateId} {
      allow read: if request.auth.uid != null;
      allow write: if isAdmin();
      allow list: if request.auth != null
    }

    function isValidVoteData(data) {
      return data.keys().hasAll(['candidateId']) &&
             data.candidateId is string && data.candidateId.size() > 0 && data.candidateId.size() < 100 &&
             get(/databases/$(database)/documents/election/$(request.resource.data.electionId)/candidate/$(data.candidateId)).data != null;
    }
    // Vote document rules
    match /election/{electionId}/vote/{uid} {
      allow read: if request.auth.uid != null ;
      allow write: if request.auth.uid != null  && isValidVoteData(request.resource.data);
      allow read, write: if isAdmin();
    }
  }
}
